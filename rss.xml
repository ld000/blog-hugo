<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Voiddd</title>
        <link>https://ld000.space/</link>
        <description>MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</description>
        <generator>Hugo 0.68.3 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>voidd247@outlook.com (Voiddd)</managingEditor>
        
        
            <webMaster>voidd247@outlook.com (Voiddd)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Wed, 08 Apr 2020 11:01:23 +0000</lastBuildDate>
        
            <atom:link rel="self" type="application/rss+xml" href="https://ld000.space/rss.xml" />
        
        
            <item>
                <title>gorm调用sharding-proxy, 参数带单引号sql报错</title>
                <link>https://ld000.space/post/gorm_sharding_proxy_sql_error/</link>
                <guid isPermaLink="true">https://ld000.space/post/gorm_sharding_proxy_sql_error/</guid>
                <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
                
                    <author>voidd247@outlook.com (Voiddd)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="软件版本">软件版本</h2>
<p>sharding-proxy-3.1.0</p>
<p>MySQL-5.7</p>
<h2 id="正文">正文</h2>
<p>最近公司某系统用 go 重构，ORM框架使用 gorm，用上了分库分表，使用 sharding-proxy 作代理。</p>
<p>但是上了 sharding-proxy 之后之前参数中带 <code>'</code> 的 sql 全都报错了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">// 报错信息
Error 3054: Unknown exception: Illegal input, unterminated <span class="s1">&#39;&#39;</span><span class="err">&#39;</span>.
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 执行 sql 的代码
</span><span class="c1">// 这里参数 dd&#39;dd 中有个 &#39;
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">Exec</span><span class="p">(</span><span class="s">&#34;update md_user_info set nickname = ? where user_id = ?&#34;</span><span class="p">,</span> <span class="s">&#34;dd&#39;dd&#34;</span><span class="p">,</span> <span class="mi">1000002082</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>怀疑可能是没用占位符，直接拼接sql引发的问题。但是看代码又没发现啥问题，只能 debug 看下。</p>
<p>中间都没发现问题，直接一路 debug 到最底层 sql 库。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// go/src/database/sql/sql.go
</span><span class="c1"></span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">DB</span><span class="p">)</span> <span class="nf">execDC</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">dc</span> <span class="o">*</span><span class="nx">driverConn</span><span class="p">,</span> <span class="nx">release</span> <span class="kd">func</span><span class="p">(</span><span class="kt">error</span><span class="p">),</span> <span class="nx">query</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="nx">res</span> <span class="nx">Result</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* ... */</span>
    <span class="k">if</span> <span class="nx">ok</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">nvdargs</span> <span class="p">[]</span><span class="nx">driver</span><span class="p">.</span><span class="nx">NamedValue</span>
        <span class="kd">var</span> <span class="nx">resi</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">Result</span>
        <span class="nf">withLock</span><span class="p">(</span><span class="nx">dc</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="cm">/* ... */</span>
            <span class="c1">// 这里执行 statmente
</span><span class="c1"></span>            <span class="nx">resi</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">ctxDriverExec</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">execerCtx</span><span class="p">,</span> <span class="nx">execer</span><span class="p">,</span> <span class="nx">query</span><span class="p">,</span> <span class="nx">nvdargs</span><span class="p">)</span>
        <span class="p">})</span>
        <span class="cm">/* ... */</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">si</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">Stmt</span>
    <span class="nf">withLock</span><span class="p">(</span><span class="nx">dc</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 这里执行 preparedStatmente
</span><span class="c1"></span>        <span class="nx">si</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">ctxDriverPrepare</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">dc</span><span class="p">.</span><span class="nx">ci</span><span class="p">,</span> <span class="nx">query</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="cm">/* ... */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>debug 进 <code>ctxDriverExec</code> 方法，走到最后的 mysql 驱动。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// github.com/go-sql-driver/mysql/connection.go
</span><span class="c1"></span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">mc</span> <span class="o">*</span><span class="nx">mysqlConn</span><span class="p">)</span> <span class="nf">Exec</span><span class="p">(</span><span class="nx">query</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="nx">driver</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span> <span class="p">(</span><span class="nx">driver</span><span class="p">.</span><span class="nx">Result</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* ... */</span>
        <span class="c1">// 判断 InterpolateParams 参数，如果为 true，就注入参数执行 statmente
</span><span class="c1"></span>        <span class="c1">// 如果为 false，就跳出回 sql.go 执行 preparedStatmente
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">!</span><span class="nx">mc</span><span class="p">.</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">InterpolateParams</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">ErrSkip</span>
        <span class="p">}</span>
        <span class="c1">// 注入参数
</span><span class="c1"></span>        <span class="c1">// try to interpolate the parameters to save extra roundtrips for preparing and closing a statement
</span><span class="c1"></span>        <span class="nx">prepared</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mc</span><span class="p">.</span><span class="nf">interpolateParams</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
    <span class="cm">/* ... */</span>

    <span class="c1">// 执行 statmente
</span><span class="c1"></span>    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mc</span><span class="p">.</span><span class="nf">exec</span><span class="p">(</span><span class="nx">query</span><span class="p">)</span>
    <span class="cm">/* ... */</span>
<span class="p">}</span>

<span class="c1">// 将参数注入 sql
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">mc</span> <span class="o">*</span><span class="nx">mysqlConn</span><span class="p">)</span> <span class="nf">interpolateParams</span><span class="p">(</span><span class="nx">query</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="nx">driver</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* ... */</span>
        <span class="k">case</span> <span class="kt">string</span><span class="p">:</span>
            <span class="nx">buf</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">buf</span><span class="p">,</span> <span class="sc">&#39;\&#39;&#39;</span><span class="p">)</span>
            <span class="c1">// 这里用位与和位左移状态位来判断状态
</span><span class="c1"></span>            <span class="k">if</span> <span class="nx">mc</span><span class="p">.</span><span class="nx">status</span><span class="o">&amp;</span><span class="nx">statusNoBackslashEscapes</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
                <span class="nx">buf</span> <span class="p">=</span> <span class="nf">escapeStringBackslash</span><span class="p">(</span><span class="nx">buf</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">buf</span> <span class="p">=</span> <span class="nf">escapeStringQuotes</span><span class="p">(</span><span class="nx">buf</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="nx">buf</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">buf</span><span class="p">,</span> <span class="sc">&#39;\&#39;&#39;</span><span class="p">)</span>
    <span class="cm">/* ... */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这里有两个相关参数：</p>
<p>一个是 <code>statusNoBackslashEscapes</code>，对应 sql_mode <code>NO_BACKSLASH_ESCAPES</code>，表示将反斜杠当作普通字符，而不是转义字符。开启后生成的sql为<code>update md_user_info set nickname = 'dd''dd' where user_id = 1000002082</code>，会把单引号替换成两个单引号(这样单引号会成对，不破坏结构)。</p>
<p>一个是 <code>InterpolateParams</code>，对应连接参数<code>interpolateParams</code>，判断是否开启客户端 prepare，进行参数转义拼接，开启可以省掉一次和服务端的prepare交互。</p>
<p>debug 往下走发现参数<code>InterpolateParams</code>是<code>true</code>，发出的sql是<code>update md_user_info set nickname = 'dd\'dd' where user_id = 1000002082</code>，没有问题，然后执行 statement 报错了。</p>
<p>先返回程序创建数据库连接的地方。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">connString</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&amp;interpolateParams=true&#34;</span><span class="p">,</span>
        <span class="nx">conf</span><span class="p">.</span><span class="nx">User</span><span class="p">,</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">Password</span><span class="p">,</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">Host</span><span class="p">,</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">Port</span><span class="p">,</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">Database</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>果然，参数里拼上了 <code>&amp;interpolateParams=true</code>，去掉这个参数试下，发出的 prepare sql 是<code>update md_user_info set nickname = ? where user_id = ?</code>，执行正常。看来是 sharding-proxy 不支持客户端预编译，接收 sql 时把反斜杠丢掉了，或者没有处理转义符。</p>
<h2 id="sql-解析">sql 解析</h2>
<p>先简单介绍下 sql 解析的处理过程。sql 解析分为，词法分析、语法和语义分析、优化、执行代码生成。词法分析主要是把输入转化成一个个 token，语法分析是生成语法树的过程。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">            前端                      中部                后端
           /   <span class="se">\ </span>                     <span class="p">|</span>                   <span class="p">|</span>
     词法分析   语法分析                优化             执行代码生成
</code></pre></td></tr></table>
</div>
</div><p>以 <code>update table set name = a</code> 为例。</p>
<p>词法分析生成6个 token：</p>
<p><img src="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200327162605.png" alt="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200327162605.png"></p>
<p>语法分析语法树：</p>
<p><img src="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200327163231.png" alt="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200327163231.png"></p>
<h2 id="sql-解析器分析">sql 解析器分析</h2>
<p>同样的 sql <code>update md_user_info set nickname = 'dd'dd' where user_id = 1000002082</code>，MySQL 正常执行，sharding-proxy 却报错，接下来分析下两者的 sql 解析器都是怎么处理这条 sql 的。</p>
<p>这里主要分析下词法分析转化成 token 阶段，sharding-proxy 也是在这个阶段报错的。</p>
<p>正常解析这条 sql 应该生成10个 token：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">update
md_user_info
<span class="nb">set</span>
<span class="nv">nickname</span>
<span class="o">=</span>
dd<span class="err">&#39;</span>dd
where
<span class="nv">user_id</span>
<span class="o">=</span>
<span class="m">1000002082</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="sharding-proxy">sharding-proxy</h3>
<p>首先看下接收到的 sql 是什么，debug 进 <code>SQLParsingEngine</code></p>
<p><img src="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200326175137.jpg" alt="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200326175137.jpg"></p>
<p>可以看到接收的 sql 没有问题，接下来看 sql 解析。</p>
<p>update 语句解析在 <code>AbstractUpdateParser.parse()</code> 处，经过 <code>LexerEngine</code>，最后用 <code>Tokenizer</code> 生成 token。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// src/main/java/io/shardingsphere/core/parsing/lexer/analyzer/Tokenizer.java
</span><span class="c1"></span>
<span class="kd">private</span> <span class="n">Token</span> <span class="nf">scanChars</span><span class="o">(</span><span class="kd">final</span> <span class="kt">char</span> <span class="n">terminatedChar</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 获取 token 的字符串长度
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">getLengthUntilTerminatedChar</span><span class="o">(</span><span class="n">terminatedChar</span><span class="o">);</span>
    <span class="c1">// 截取字符串，返回新 token
</span><span class="c1"></span>    <span class="k">return</span> <span class="k">new</span> <span class="n">Token</span><span class="o">(</span><span class="n">Literals</span><span class="o">.</span><span class="na">CHARS</span><span class="o">,</span> <span class="n">input</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">offset</span> <span class="o">+</span> <span class="n">1</span><span class="o">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">),</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">length</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// src/main/java/io/shardingsphere/core/parsing/lexer/analyzer/Tokenizer.java
</span><span class="c1"></span>
<span class="c1">// 获取 token 的字符串长度
</span><span class="c1"></span><span class="kd">private</span> <span class="kt">int</span> <span class="nf">getLengthUntilTerminatedChar</span><span class="o">(</span><span class="kd">final</span> <span class="kt">char</span> <span class="n">terminatedChar</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
    <span class="c1">// 当前字符是否是检测字符
</span><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">terminatedChar</span> <span class="o">!=</span> <span class="n">charAt</span><span class="o">(</span><span class="n">offset</span> <span class="o">+</span> <span class="n">length</span><span class="o">)</span> 
        <span class="c1">// 判断是否是两个相同字符
</span><span class="c1"></span>                    <span class="o">||</span> <span class="n">hasEscapeChar</span><span class="o">(</span><span class="n">terminatedChar</span><span class="o">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">length</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">offset</span> <span class="o">+</span> <span class="n">length</span> <span class="o">&gt;=</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">UnterminatedCharException</span><span class="o">(</span><span class="n">terminatedChar</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 处理是否是两个相同字符
</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">hasEscapeChar</span><span class="o">(</span><span class="n">terminatedChar</span><span class="o">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">length</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">length</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="n">length</span><span class="o">++;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">length</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>看下 <code>dd'dd</code> 的处理过程，这时 <code>terminatedChar</code> 的值是 <code>'</code> ，剩余要处理的字符串是 <code>'dd\'dd' where user_id = 1000002082</code> ，逐个字符向后检测。</p>
<p><img src="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200327155726.png" alt="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200327155726.png"></p>
<p>这里<code>'</code> 会成对解析，如果碰上<code>'</code> 没有成对的情况，就会报错。不处理转义字符。</p>
<h3 id="mysql">MySQL</h3>
<p>再看下 MySQL 的解析器。</p>
<p><img src="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200327143436.png" alt="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200327143436.png"></p>
<p>看到接收的 sql 和 sharding-proxy 是一样的(多一个反斜杠是因为这里按字符串显示，多一个转义符)</p>
<p>转化 token 的代码在 sql_lex.cc 的 MYSQLlex → lex_one_token 方法中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// sql/sql_lex.cc
</span><span class="c1"></span>
<span class="kt">int</span> <span class="nf">MYSQLlex</span><span class="p">(</span><span class="n">YYSTYPE</span> <span class="o">*</span><span class="n">yylval</span><span class="p">,</span> <span class="n">YYLTYPE</span> <span class="o">*</span><span class="n">yylloc</span><span class="p">,</span> <span class="n">THD</span> <span class="o">*</span><span class="n">thd</span><span class="p">)</span>
<span class="p">{</span>
    <span class="cm">/* ... */</span>

    <span class="n">token</span><span class="o">=</span> <span class="n">lex_one_token</span><span class="p">(</span><span class="n">yylval</span><span class="p">,</span> <span class="n">thd</span><span class="p">);</span>

    <span class="cm">/* ... */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>普通字符的解析最后会走进 <code>get_text</code> 方法进行截取。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// sql/sql_lex.cc
</span><span class="c1"></span>
<span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">get_text</span><span class="p">(</span><span class="n">Lex_input_stream</span> <span class="o">*</span><span class="n">lip</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pre_skip</span><span class="p">,</span> <span class="kt">int</span> <span class="n">post_skip</span><span class="p">)</span>
<span class="p">{</span>
    <span class="cm">/* ... */</span>

    <span class="c1">// 处理转义字符
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\\&#39;</span> <span class="o">&amp;&amp;</span>
        <span class="o">!</span><span class="p">(</span><span class="n">lip</span><span class="o">-&gt;</span><span class="n">m_thd</span><span class="o">-&gt;</span><span class="n">variables</span><span class="p">.</span><span class="n">sql_mode</span> <span class="o">&amp;</span> <span class="n">MODE_NO_BACKSLASH_ESCAPES</span><span class="p">))</span>
    <span class="p">{</span>                    <span class="c1">// Escaped character
</span><span class="c1"></span>        <span class="n">found_escape</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">lip</span><span class="o">-&gt;</span><span class="n">eof</span><span class="p">())</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">lip</span><span class="o">-&gt;</span><span class="n">yySkip</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="cm">/* ... */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这里有个处理转义字符的逻辑，如果当前字符是反斜杠，就向后跳两个字符，跳过转义字符。</p>
<p><img src="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200327160823.png" alt="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200327160823.png"></p>
<p>最终的 token 列表。(token 是个 int，对应关系在 sql_yacc.h 中)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="m">865</span> UPDATE_SYM      update 
<span class="m">484</span> IDENT_QUOTED    md_user_info 
<span class="m">757</span> SET             <span class="nb">set</span> 
<span class="m">484</span> IDENT_QUOTED    nickname 
<span class="m">415</span> <span class="nv">EQ</span>              <span class="o">=</span> 
<span class="m">828</span> TEXT_STRING     dd<span class="err">&#39;</span>dd
<span class="m">891</span> WHERE           where 
<span class="m">484</span> IDENT_QUOTED    user_id 
<span class="m">415</span> <span class="nv">EQ</span>              <span class="o">=</span> 
<span class="m">629</span> NUM             <span class="m">1000002082</span>
<span class="m">411</span> END_OF_INPUT
</code></pre></td></tr></table>
</div>
</div><p>可以看到 sharding-proxy 因为没有处理开启客户端预编译的情况，解析报错了。</p>
<h2 id="sharding-proxy-修改">sharding-proxy 修改</h2>
<p>修改也很简单，加上处理转义字符的逻辑就可以了，修改 <code>Tokenizer</code> 的 <code>getLengthUntilTerminatedChar</code> 方法，增加处理转义字符的逻辑。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// src/main/java/io/shardingsphere/core/parsing/lexer/analyzer/Tokenizer.java
</span><span class="c1"></span>
<span class="kd">private</span> <span class="kt">int</span> <span class="nf">getLengthUntilTerminatedChar</span><span class="o">(</span><span class="kd">final</span> <span class="kt">char</span> <span class="n">terminatedChar</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">terminatedChar</span> <span class="o">!=</span> <span class="n">charAt</span><span class="o">(</span><span class="n">offset</span> <span class="o">+</span> <span class="n">length</span><span class="o">)</span> <span class="o">||</span> <span class="n">hasEscapeChar</span><span class="o">(</span><span class="n">terminatedChar</span><span class="o">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">length</span><span class="o">)</span>
    <span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">offset</span> <span class="o">+</span> <span class="n">length</span> <span class="o">&gt;=</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">UnterminatedCharException</span><span class="o">(</span><span class="n">terminatedChar</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// 增加处理转义字符
</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="sc">&#39;\\&#39;</span> <span class="o">==</span> <span class="n">charAt</span><span class="o">(</span><span class="n">offset</span> <span class="o">+</span> <span class="n">length</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">length</span><span class="o">++;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">hasEscapeChar</span><span class="o">(</span><span class="n">terminatedChar</span><span class="o">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">length</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">length</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="n">length</span><span class="o">++;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">length</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这里忽略了sql_mode=NO_BACKSLASH_ESCAPES 的情况，因为 sharding-jdbc 里没有传递相关参数，包括客户端预编译的相关参数也没传递。</p>
<h2 id="其他">其他</h2>
<p>在没修改的情况下顺手用 Java 也测试下 sharding-jdbc 是否支持客户端预编译。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="o">);</span>
<span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#34;jdbc:mysql://localhost:3307/xxx?useServerPrepStmts=false&#34;</span><span class="o">;</span>
<span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">&#34;xxx&#34;</span><span class="o">;</span>
<span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&#34;xxx&#34;</span><span class="o">;</span>
<span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
<span class="n">PreparedStatement</span> <span class="n">st</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&#34;update md_user_info set nickname = ? where user_id = ?&#34;</span><span class="o">;</span>

<span class="n">st</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
<span class="n">st</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="s">&#34;dd&#39;dd&#34;</span><span class="o">);</span>
<span class="n">st</span><span class="o">.</span><span class="na">setLong</span><span class="o">(</span><span class="n">2</span><span class="o">,</span> <span class="n">1000002082</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">execute</span><span class="o">());</span>
</code></pre></td></tr></table>
</div>
</div><p>Java 库的客户端预编译参数是<code>useServerPrepStmts</code>，默认值就是 false，表示关闭服务端预编译，开启客户端预编译，为了方便看我就写上了。执行一下，果然报错了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">Exception in thread <span class="s2">&#34;main&#34;</span> java.sql.SQLException: Unknown exception: Illegal input, unterminated <span class="s1">&#39;&#39;</span><span class="err">&#39;</span>.
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/go/">go</category>
                                
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/gorm/">gorm</category>
                                
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/sharding-proxy/">sharding-proxy</category>
                                
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/mysql/">MySQL</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Mac下用CLion debug MySQL5.7源码</title>
                <link>https://ld000.space/post/mac_clion_debug_mysql_source/</link>
                <guid isPermaLink="true">https://ld000.space/post/mac_clion_debug_mysql_source/</guid>
                <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
                
                    <author>voidd247@outlook.com (Voiddd)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="编译安装-mysql">编译安装 MySQL</h2>
<p>首先从 github 下载 mysql 源码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">    https://github.com/mysql/mysql-server
</code></pre></td></tr></table>
</div>
</div><p>接下来编译安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">    // 进到源码目录
    <span class="nb">cd</span> /Users/d/c/mysql-server-5.7
    
    // cmake
    cmake <span class="se">\
</span><span class="se"></span>    -DCMAKE_INSTALL_PREFIX<span class="o">=</span>/Users/d/c/mysql_build <span class="se">\
</span><span class="se"></span>    -DMYSQL_DATADIR<span class="o">=</span>/Users/d/c/mysql_build/data <span class="se">\
</span><span class="se"></span>    -DSYSCONFDIR<span class="o">=</span>/Users/d/c/mysql_build <span class="se">\
</span><span class="se"></span>    -DMYSQL_UNIX_ADDR<span class="o">=</span>/Users/d/c/mysql_build/data/mysql.sock <span class="se">\
</span><span class="se"></span>    -DWITH_DEBUG<span class="o">=</span><span class="m">1</span> <span class="se">\
</span><span class="se"></span>    -DDOWNLOAD_BOOST<span class="o">=</span><span class="m">1</span> <span class="se">\
</span><span class="se"></span>    -DWITH_BOOST<span class="o">=</span>/Users/d/c/boost <span class="se">\
</span><span class="se"></span>    -DWITH_SSL<span class="o">=</span>/usr/local/opt/openssl@1.1
    
    // install
    make <span class="o">&amp;&amp;</span> make install
    
    // 初始化数据库
    <span class="nb">cd</span> /Users/d/c/mysql_build
    bin/mysqld --basedir<span class="o">=</span>/Users/d/c/mysql_build --datadir<span class="o">=</span>/Users/d/c/mysql_build/data --initialize-insecure
</code></pre></td></tr></table>
</div>
</div><p><code>-DDOWNLOAD_BOOST=1 -DWITH_BOOST=/Users/d/c/boost</code> 这两个参数指定 boost 路径，之后会自动下载 boost。</p>
<p><code>-DWITH_SSL=/usr/local/opt/openssl@1.1</code> 指定 openssl 路径，不指定有可能会报以下错误</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">    Cannot find appropriate system libraries <span class="k">for</span> <span class="nv">WITH_SSL</span><span class="o">=</span>system.
    Make sure you have specified a supported SSL version.
    Valid options are :
    system <span class="o">(</span>use the OS openssl library<span class="o">)</span>,
    yes <span class="o">(</span>synonym <span class="k">for</span> system<span class="o">)</span>,
    &lt;/path/to/custom/openssl/installation&gt;
    
    CMake Error at cmake/ssl.cmake:63 <span class="o">(</span>MESSAGE<span class="o">)</span>:
    Please install the appropriate openssl developer package.
</code></pre></td></tr></table>
</div>
</div><h2 id="配置clion">配置CLion</h2>
<p>打开 mysql 源码目录，修改 cmake 配置</p>
<p><img src="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200326121222.jpg" alt="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200326121222.jpg"></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">    -DCMAKE_INSTALL_PREFIX<span class="o">=</span>/Users/d/c/mysql_build -DMYSQL_DATADIR<span class="o">=</span>/Users/d/c/mysql_build/data -DSYSCONFDIR<span class="o">=</span>/Users/d/c/mysql_build -DMYSQL_UNIX_ADDR<span class="o">=</span>/Users/d/c/mysql_build/data/mysql.sock -DWITH_DEBUG<span class="o">=</span><span class="m">1</span> -DDOWNLOAD_BOOST<span class="o">=</span><span class="m">1</span> -DWITH_BOOST<span class="o">=</span>/Users/d/c/boost -DWITH_SSL<span class="o">=</span>/usr/local/opt/openssl@1.1
</code></pre></td></tr></table>
</div>
</div><p>之后选择 mysqld，然后点击 debug 按钮就可以开始调试了。</p>
<p><img src="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200326122342.jpg" alt="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200326122342.jpg"></p>
]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/java/">java</category>
                                
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/clion/">CLion</category>
                                
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/mysql/">MySQL</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>MyBatis 一级缓存在分布式下的坑</title>
                <link>https://ld000.space/post/mybatis_scale_localcache/</link>
                <guid isPermaLink="true">https://ld000.space/post/mybatis_scale_localcache/</guid>
                <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
                
                    <author>voidd247@outlook.com (Voiddd)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>最近生产环境的余额系统在扣减余额时经常出现余额够但是提示余额不足无法扣减的情况。查看代码逻辑，发现会先查询一次判断余额是否够，再实际扣减，之后查看日志发现并没有执行查询语句就返回错误了，推测可能是 MyBatis 一级缓存没有关闭引起的脏数据问题。关闭一级缓存后果然恢复正常了。</p>
<p>所以有了这篇文章，验证下 MyBatis 一级缓存的生效条件。</p>
<h2 id="一级缓存">一级缓存</h2>
<p>MyBatis 默认会开启一级缓存，在同一次会话中，如果执行多次查询条件相同的 SQL，会进行优化，优先命中一级缓存，避免多次查询数据库。</p>
<p>这样在单机环境下是没有问题的，可以减少于数据库的交互。但是生成环境一般都是多机部署，这样一级缓存开启的情况下就容易出现脏数据。</p>
<p>接下来做两个实验验证下。</p>
<h3 id="测试1">测试1</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">SqlSession</span> <span class="n">sqlSession</span> <span class="o">=</span> <span class="n">sqlSessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="n">UserWalletMapperExt</span> <span class="n">mapper</span> <span class="o">=</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span><span class="n">UserWalletMapperExt</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">queryUserBalance</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">));</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">queryUserBalance</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">));</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">queryUserBalance</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">));</span>
    <span class="n">mapper</span><span class="o">.</span><span class="na">addBalanceByType</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">100L</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">queryUserBalance</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">));</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">queryUserBalance</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">...queryUserBalance:debug:181 <span class="o">==</span>&gt;  Preparing: <span class="k">select</span> balance from user_wallet WHERE <span class="nv">user_id</span> <span class="o">=</span> ? and <span class="nb">type</span> <span class="o">=</span> ? 
...queryUserBalance:debug:181 <span class="o">==</span>&gt; Parameters: 10<span class="o">(</span>Long<span class="o">)</span>, 1<span class="o">(</span>Integer<span class="o">)</span>
...queryUserBalance:debug:181 &lt;<span class="o">==</span>      Total: <span class="m">1</span>
<span class="m">200</span>
<span class="m">200</span>
<span class="m">200</span>
...addBalanceByType:debug:181 <span class="o">==</span>&gt;  Preparing: update user_wallet <span class="nb">set</span> <span class="nv">balance</span> <span class="o">=</span> balance + ? where <span class="nv">user_id</span> <span class="o">=</span> ? and <span class="nb">type</span> <span class="o">=</span> ? 
...addBalanceByType:debug:181 <span class="o">==</span>&gt; Parameters: 100<span class="o">(</span>Long<span class="o">)</span>, 10<span class="o">(</span>Long<span class="o">)</span>, 1<span class="o">(</span>Integer<span class="o">)</span>
...addBalanceByType:debug:181 &lt;<span class="o">==</span>    Updates: <span class="m">1</span>
...queryUserBalance:debug:181 <span class="o">==</span>&gt;  Preparing: <span class="k">select</span> balance from user_wallet WHERE <span class="nv">user_id</span> <span class="o">=</span> ? and <span class="nb">type</span> <span class="o">=</span> ? 
...queryUserBalance:debug:181 <span class="o">==</span>&gt; Parameters: 10<span class="o">(</span>Long<span class="o">)</span>, 1<span class="o">(</span>Integer<span class="o">)</span>
...queryUserBalance:debug:181 &lt;<span class="o">==</span>      Total: <span class="m">1</span>
<span class="m">300</span>
<span class="m">300</span>
</code></pre></td></tr></table>
</div>
</div><p>可以看到在同一个session中，相同的查询在调用更新前只会执行一次。</p>
<h3 id="测试2">测试2</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">SqlSession</span> <span class="n">sqlSession1</span> <span class="o">=</span> <span class="n">sqlSessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="n">UserWalletMapperExt</span> <span class="n">mapper1</span> <span class="o">=</span> <span class="n">sqlSession1</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span><span class="n">UserWalletMapperExt</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;session1: &#34;</span> <span class="o">+</span> <span class="n">mapper1</span><span class="o">.</span><span class="na">queryUserBalance</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">));</span>

    <span class="n">SqlSession</span> <span class="n">sqlSession2</span> <span class="o">=</span> <span class="n">sqlSessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="n">UserWalletMapperExt</span> <span class="n">mapper2</span> <span class="o">=</span> <span class="n">sqlSession2</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span><span class="n">UserWalletMapperExt</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;session2: &#34;</span> <span class="o">+</span> <span class="n">mapper2</span><span class="o">.</span><span class="na">queryUserBalance</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">));</span>
    <span class="n">mapper2</span><span class="o">.</span><span class="na">addBalanceByType</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">100L</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;session2: &#34;</span> <span class="o">+</span> <span class="n">mapper2</span><span class="o">.</span><span class="na">queryUserBalance</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">));</span>

    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;session1: &#34;</span> <span class="o">+</span> <span class="n">mapper1</span><span class="o">.</span><span class="na">queryUserBalance</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">...queryUserBalance:debug:181 <span class="o">==</span>&gt;  Preparing: <span class="k">select</span> balance from user_wallet WHERE <span class="nv">user_id</span> <span class="o">=</span> ? and <span class="nb">type</span> <span class="o">=</span> ? 
...queryUserBalance:debug:181 <span class="o">==</span>&gt; Parameters: 10<span class="o">(</span>Long<span class="o">)</span>, 1<span class="o">(</span>Integer<span class="o">)</span>
...queryUserBalance:debug:181 &lt;<span class="o">==</span>      Total: <span class="m">1</span>
session1: <span class="m">500</span>
...queryUserBalance:debug:181 <span class="o">==</span>&gt;  Preparing: <span class="k">select</span> balance from user_wallet WHERE <span class="nv">user_id</span> <span class="o">=</span> ? and <span class="nb">type</span> <span class="o">=</span> ? 
...queryUserBalance:debug:181 <span class="o">==</span>&gt; Parameters: 10<span class="o">(</span>Long<span class="o">)</span>, 1<span class="o">(</span>Integer<span class="o">)</span>
...queryUserBalance:debug:181 &lt;<span class="o">==</span>      Total: <span class="m">1</span>
session2: <span class="m">500</span>
...addBalanceByType:debug:181 <span class="o">==</span>&gt;  Preparing: update user_wallet <span class="nb">set</span> <span class="nv">balance</span> <span class="o">=</span> balance + ? where <span class="nv">user_id</span> <span class="o">=</span> ? and <span class="nb">type</span> <span class="o">=</span> ? 
...addBalanceByType:debug:181 <span class="o">==</span>&gt; Parameters: 100<span class="o">(</span>Long<span class="o">)</span>, 10<span class="o">(</span>Long<span class="o">)</span>, 1<span class="o">(</span>Integer<span class="o">)</span>
...addBalanceByType:debug:181 &lt;<span class="o">==</span>    Updates: <span class="m">1</span>
...queryUserBalance:debug:181 <span class="o">==</span>&gt;  Preparing: <span class="k">select</span> balance from user_wallet WHERE <span class="nv">user_id</span> <span class="o">=</span> ? and <span class="nb">type</span> <span class="o">=</span> ? 
...queryUserBalance:debug:181 <span class="o">==</span>&gt; Parameters: 10<span class="o">(</span>Long<span class="o">)</span>, 1<span class="o">(</span>Integer<span class="o">)</span>
...queryUserBalance:debug:181 &lt;<span class="o">==</span>      Total: <span class="m">1</span>
session2: <span class="m">600</span>
session1: <span class="m">500</span>
</code></pre></td></tr></table>
</div>
</div><p>可以看到在 session2 更新了值得情况下，session1 依旧使用了一级缓存查询出旧值。</p>
<h3 id="关闭一级缓存">关闭一级缓存</h3>
<p>接下来关闭一级缓存试一下，设置 LocalCache 级别为 statement 或者在语句上设置flushCache=&quot;true&quot; 都可以。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// 设置全局一级缓存级别为 STATEMENT
</span><span class="c1"></span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">Configuration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">Configuration</span><span class="o">();</span>
<span class="n">configuration</span><span class="o">.</span><span class="na">setLocalCacheScope</span><span class="o">(</span><span class="n">LocalCacheScope</span><span class="o">.</span><span class="na">STATEMENT</span><span class="o">);</span>
<span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setConfiguration</span><span class="o">(</span><span class="n">configuration</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="c">&lt;!-- 设置单个语句不使用一级缓存 --&gt;</span>
<span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&#34;queryUserBalance&#34;</span> <span class="na">resultType=</span><span class="s">&#34;java.lang.Long&#34;</span> <span class="na">flushCache=</span><span class="s">&#34;true&#34;</span><span class="nt">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>测试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test3</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">SqlSession</span> <span class="n">sqlSession</span> <span class="o">=</span> <span class="n">sqlSessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="n">UserWalletMapperExt</span> <span class="n">mapper</span> <span class="o">=</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span><span class="n">UserWalletMapperExt</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">queryUserBalance</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">));</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">queryUserBalance</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">));</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">queryUserBalance</span><span class="o">(</span><span class="n">10L</span><span class="o">,</span> <span class="n">1</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">...queryUserBalance:debug:181 <span class="o">==</span>&gt;  Preparing: <span class="k">select</span> balance from user_wallet WHERE <span class="nv">user_id</span> <span class="o">=</span> ? and <span class="nb">type</span> <span class="o">=</span> ? 
...queryUserBalance:debug:181 <span class="o">==</span>&gt; Parameters: 10<span class="o">(</span>Long<span class="o">)</span>, 1<span class="o">(</span>Integer<span class="o">)</span>
...queryUserBalance:debug:181 &lt;<span class="o">==</span>      Total: <span class="m">1</span>
<span class="m">600</span>
...queryUserBalance:debug:181 <span class="o">==</span>&gt;  Preparing: <span class="k">select</span> balance from user_wallet WHERE <span class="nv">user_id</span> <span class="o">=</span> ? and <span class="nb">type</span> <span class="o">=</span> ? 
...queryUserBalance:debug:181 <span class="o">==</span>&gt; Parameters: 10<span class="o">(</span>Long<span class="o">)</span>, 1<span class="o">(</span>Integer<span class="o">)</span>
...queryUserBalance:debug:181 &lt;<span class="o">==</span>      Total: <span class="m">1</span>
<span class="m">600</span>
...queryUserBalance:debug:181 <span class="o">==</span>&gt;  Preparing: <span class="k">select</span> balance from user_wallet WHERE <span class="nv">user_id</span> <span class="o">=</span> ? and <span class="nb">type</span> <span class="o">=</span> ? 
...queryUserBalance:debug:181 <span class="o">==</span>&gt; Parameters: 10<span class="o">(</span>Long<span class="o">)</span>, 1<span class="o">(</span>Integer<span class="o">)</span>
...queryUserBalance:debug:181 &lt;<span class="o">==</span>      Total: <span class="m">1</span>
<span class="m">600</span>
</code></pre></td></tr></table>
</div>
</div><p>可以看到关闭一级缓存后所有语句都会实际执行。</p>
<h2 id="总结">总结</h2>
<p>MyBatis 的一级缓存在单机环境下可以减少与 MySql 的交互，提高性能，但是在分布式环境下容易产生脏数据。建议在生产环境下关闭，使用 Redis，Memcache 等代替。</p>
]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/java/">java</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>用外置 Tomcat 部署 Spring Boot 应用</title>
                <link>https://ld000.space/post/spring_boot_tomcat/</link>
                <guid isPermaLink="true">https://ld000.space/post/spring_boot_tomcat/</guid>
                <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
                
                    <author>voidd247@outlook.com (Voiddd)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>现在越来越多的人使用 Spring Boot 来开发自己的应用了，Spring Boot 用起来是各种方便，还内置 web 容器，只需要<code>java -jar</code>就能启动应用。但有时候有些公司的 Tomcat 是单独部署，有专人维护的，这时我们就需要将 Spring Boot 应用打包成 war 部署。</p>
<h2 id="打包方式设置为-war">打包方式设置为 war</h2>
<p>修改 pom.xml 文件，将打包方式设置为 war</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">    <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>添加 war 插件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">    <span class="nt">&lt;plugin&gt;</span> 
        <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span> 
        <span class="nt">&lt;artifactId&gt;</span>maven-war-plugin<span class="nt">&lt;/artifactId&gt;</span> 
        <span class="nt">&lt;version&gt;</span>3.0.0<span class="nt">&lt;/version&gt;</span> 
    <span class="nt">&lt;/plugin&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>将 <code>spring-boot-starter-web</code> 的 Tomcat 依赖设为 provided，这样还能继续在 IDE 里调试，而且打包时排除了 tomcat 依赖。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;exclusions&gt;</span>
            <span class="nt">&lt;exclusion&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-tomcat<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;/exclusion&gt;</span>
        <span class="nt">&lt;/exclusions&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    
    <span class="nt">&lt;dependency&gt;</span> 
    	<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
    	<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-tomcat<span class="nt">&lt;/artifactId&gt;</span> 
    	<span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span> 
    <span class="nt">&lt;/dependency&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>这样 pom 文件就修改好了。</p>
<h2 id="修改入口方法">修改入口方法</h2>
<p>继承<code>SpringBootServletInitializer</code>类，并且重写<code>configure</code>方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@SpringBootApplication</span> 
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="kd">extends</span> <span class="n">SpringBootServletInitializer</span> <span class="o">{</span> 
    
        <span class="nd">@Override</span> 
        <span class="kd">protected</span> <span class="n">SpringApplicationBuilder</span> <span class="nf">configure</span><span class="o">(</span><span class="n">SpringApplicationBuilder</span> <span class="n">application</span><span class="o">)</span> <span class="o">{</span> 
            <span class="k">return</span> <span class="n">application</span><span class="o">.</span><span class="na">sources</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> 
        <span class="o">}</span> 
    
        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span> 
            <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span> 
        <span class="o">}</span> 
    
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这样就修改好了</p>
<h2 id="测试">测试</h2>
<p><code>mvn clean package</code> 打包后放入 tomcat webapps 文件夹里测试下</p>
<p><img src="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200107113901.png" alt=""></p>
<p>顺利启动</p>
<h2 id="启动后运行">启动后运行</h2>
<p>直接用 Spring Boot 内置容器启动应用时，一些启动后运行的代码可以直接写在 main 方法里</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@SpringBootApplication</span> 
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span> 
    
        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span> 
            <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span> 
    
            <span class="c1">// 启动后运行的代码
</span><span class="c1"></span>            <span class="o">.....</span>
        <span class="o">}</span> 
    
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>换成 war 包运行后这样写就无法运行了，因为启动不是走得 main 方法。这时可以实现 <code>CommandLineRunner</code> 接口来实现。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="cm">/**
</span><span class="cm">     * Interface used to indicate that a bean should &lt;em&gt;run&lt;/em&gt; when it is contained within
</span><span class="cm">     * a {@link SpringApplication}. Multiple {@link CommandLineRunner} beans can be defined
</span><span class="cm">     * within the same application context and can be ordered using the {@link Ordered}
</span><span class="cm">     * interface or {@link Order @Order} annotation.
</span><span class="cm">     * &lt;p&gt;
</span><span class="cm">     * If you need access to {@link ApplicationArguments} instead of the raw String array
</span><span class="cm">     * consider using {@link ApplicationRunner}.
</span><span class="cm">     *
</span><span class="cm">     * 用来指定 {@link SpringApplication} 中需要运行的 bean。可以包含多个 {@link CommandLineRunner}
</span><span class="cm">     * 顺序用 {@link Ordered} 接口或 {@link Order @Order} 注解指定
</span><span class="cm">     *
</span><span class="cm">     * @author Dave Syer
</span><span class="cm">     * @see ApplicationRunner
</span><span class="cm">     */</span>
    <span class="nd">@FunctionalInterface</span>
    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>
    
    	<span class="cm">/**
</span><span class="cm">    	 * Callback used to run the bean.
</span><span class="cm">    	 * @param args incoming main method arguments
</span><span class="cm">    	 * @throws Exception on error
</span><span class="cm">    	 */</span>
    	<span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">;</span>
    
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>实现这个接口后把要运行的代码写在 <code>run</code> 方法中就可以了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@Component</span>
    <span class="nd">@Order</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">1</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">MotanSwitcherRunner</span> <span class="kd">implements</span> <span class="n">CommandLineRunner</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 启动后运行的代码
</span><span class="c1"></span>            <span class="o">.....</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/java/">java</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>让 Redis zset 支持多条件排序</title>
                <link>https://ld000.space/post/make_redis_zset_support_multiple_sort/</link>
                <guid isPermaLink="true">https://ld000.space/post/make_redis_zset_support_multiple_sort/</guid>
                <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
                
                    <author>voidd247@outlook.com (Voiddd)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>一些需求中经常要我们实现一个排行榜，数据量少的话可以使用 RDB 数据库排序，数据量大可以自己实现算法或者使用 NoSQL 数据库排序，NoSQL 数据库中最方便的可能就是利用 Redis 的 zset 来实现了。 例如要实现一个玩家成就点数的排行榜：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">    &gt;zadd r <span class="m">100</span> A
    <span class="s2">&#34;1&#34;</span>
    &gt;zadd r <span class="m">200</span> B
    <span class="s2">&#34;1&#34;</span>
    &gt;zadd r <span class="m">200</span> C
    <span class="s2">&#34;1&#34;</span>
    &gt;zadd r <span class="m">300</span> D
    <span class="s2">&#34;1&#34;</span>
    &gt;zrange r <span class="m">0</span> -1 withscores
    1<span class="o">)</span>  <span class="s2">&#34;A&#34;</span>
    2<span class="o">)</span>  <span class="s2">&#34;100&#34;</span>
    3<span class="o">)</span>  <span class="s2">&#34;B&#34;</span>
    4<span class="o">)</span>  <span class="s2">&#34;200&#34;</span>
    5<span class="o">)</span>  <span class="s2">&#34;C&#34;</span>
    6<span class="o">)</span>  <span class="s2">&#34;200&#34;</span>
    7<span class="o">)</span>  <span class="s2">&#34;D&#34;</span>
    8<span class="o">)</span>  <span class="s2">&#34;300&#34;</span>       
</code></pre></td></tr></table>
</div>
</div><p>其中 B 和 C 的分数是一样的，这时我们可能想让先达到对应分数的人排在前面，相当于增加了一个排序维度。这时直接用 score 就不能实现了，需要做一些转换，这里分享几个我会用到的方法。</p>
<h2 id="实现方法">实现方法</h2>
<p>假设我们需要一个三个维度的排序，第一维度是具体的数值，第二个维度是一个是否标志位，第三个维度是时间戳。其中氪金的（0否1是）和时间早的排序靠前。</p>
<p>以下是原始数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">    玩家  成就  是否氪金  时间戳
    A    <span class="m">100</span>  <span class="m">1</span>        <span class="m">1571819021259</span>
    B    <span class="m">200</span>  <span class="m">0</span>        <span class="m">1571819021259</span>
    C    <span class="m">200</span>  <span class="m">1</span>        <span class="m">1571819021259</span>
    D    <span class="m">400</span>  <span class="m">0</span>        <span class="m">1571819021259</span>
    E    <span class="m">200</span>  <span class="m">1</span>        <span class="m">1571810001259</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="1-利用-key-排序">1. 利用 key 排序</h3>
<p>如果后两个维度初始化后就不再变化的话，可以利用 Redis 的排序特性，将不变的维度写到 key 里，这样 score 相同时会用 key 来进行排序。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">    <span class="c1"># 这里反转时间戳(9999999999999 - 1571810001259)，让时间早的排在前面</span>
    &gt;zadd r <span class="m">100</span> A-1-8428180978740
    <span class="s2">&#34;1&#34;</span>
    &gt;zadd r <span class="m">200</span> B-0-8428180978740
    <span class="s2">&#34;1&#34;</span>
    &gt;zadd r <span class="m">200</span> C-1-8428180978740
    <span class="s2">&#34;1&#34;</span>
    &gt;zadd r <span class="m">400</span> D-0-8428180978740
    <span class="s2">&#34;1&#34;</span>
    &gt;zadd r <span class="m">200</span> E-1-8428189998740
    <span class="s2">&#34;1&#34;</span>
    &gt;zrange r <span class="m">0</span> -1 withscores
     1<span class="o">)</span>  <span class="s2">&#34;A-1-8428180978740&#34;</span>
     2<span class="o">)</span>  <span class="s2">&#34;100&#34;</span>
     3<span class="o">)</span>  <span class="s2">&#34;B-0-8428180978740&#34;</span>
     4<span class="o">)</span>  <span class="s2">&#34;200&#34;</span>
     5<span class="o">)</span>  <span class="s2">&#34;C-1-8428180978740&#34;</span>
     6<span class="o">)</span>  <span class="s2">&#34;200&#34;</span>
     7<span class="o">)</span>  <span class="s2">&#34;E-1-8428189998740&#34;</span>
     8<span class="o">)</span>  <span class="s2">&#34;200&#34;</span>
     9<span class="o">)</span>  <span class="s2">&#34;D-0-8428180978740&#34;</span>
     10<span class="o">)</span>  <span class="s2">&#34;400&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>以上就是第一种方法了，实现起来非常简单。</p>
<hr>
<h3 id="score-存储格式">score 存储格式</h3>
<p>在介绍下两种方法前先来看看 zset 的 score 是怎么存储的，能保留多少精度，直接看跳表 node 的结构。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c">    <span class="cm">/*
</span><span class="cm">     * 跳跃表节点
</span><span class="cm">     */</span>
    <span class="k">typedef</span> <span class="k">struct</span> <span class="n">zskiplistNode</span> <span class="p">{</span>
    
        <span class="c1">// 成员对象
</span><span class="c1"></span>        <span class="n">robj</span> <span class="o">*</span><span class="n">obj</span><span class="p">;</span>
    
        <span class="c1">// 分值
</span><span class="c1"></span>        <span class="kt">double</span> <span class="n">score</span><span class="p">;</span>
    
        <span class="c1">// 后退指针
</span><span class="c1"></span>        <span class="k">struct</span> <span class="n">zskiplistNode</span> <span class="o">*</span><span class="n">backward</span><span class="p">;</span>
    
        <span class="c1">// 层
</span><span class="c1"></span>        <span class="k">struct</span> <span class="n">zskiplistLevel</span> <span class="p">{</span>
            <span class="c1">// 前进指针
</span><span class="c1"></span>            <span class="k">struct</span> <span class="n">zskiplistNode</span> <span class="o">*</span><span class="n">forward</span><span class="p">;</span>
    
            <span class="c1">// 跨度
</span><span class="c1"></span>            <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">span</span><span class="p">;</span>
        <span class="p">}</span> <span class="n">level</span><span class="p">[];</span>
    
    <span class="p">}</span> <span class="n">zskiplistNode</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>我们可以看到 score 是用 double 存储的，它是一个 IEEE 754 标准的 double 浮点数。（IEEE 754 标准的详细存储规则可以搜索其他文章，这里重点分析保留的精度）</p>
<p><img src="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200107114011.png" alt=""></p>
<p>一个 64 位浮点数存储时分为3段</p>
<ul>
<li>S:符号位，第一段，占1位，0表示正数，1表示负数。</li>
<li>Exp:指数字，第二段，占11位，移码方式表示正负数，排除全0和全1表示零和无穷大的特殊情况，指数部分是−1022～+1023加上1023，指数值的大小从1～2046</li>
<li>Fraction:有效数字，占52位，定点数，小数点放在尾数最前面</li>
</ul>
<pre><code>    实际数字 = (-1)^S * Fraction * 2^Exp  (二进制计算)
</code></pre><p>double 存储的有效数据是第三段的52位，超出会损失精度，由于标准规定小数点是在有效数字最前面，所以实际可以存储 53 位数字。比如有个数字是 <code>111___(53个1)</code>，有效数字位存储的是 <code>.11___(52个1)</code>，计算时会在个位补1，得到<code>1.11___(53个1)</code>，最大值为 <code>2^53 = 9007199254740991</code>，大概 <code>log2^53 = 15.95</code> 位。</p>
<p>可以看到只要保证有效数字小于等于<code>9007199254740991</code>就不会损失精度。</p>
<p>好了，现在有了理论基础，接下来看看我们可以怎么实现。</p>
<hr>
<h3 id="2-二进制分段">2. 二进制分段</h3>
<p>第二种方法，可以利用二进制 64 位 long 分段存储各个维度。</p>
<p>首先时间戳如果全存储就太长了，可以通过一些计算缩小一些，先忽略毫秒，然后和一个大数计算差值。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kt">int</span> <span class="n">MAX_SECOND</span> <span class="o">=</span> <span class="n">1861891200</span><span class="o">;</span> <span class="c1">// 2029.1.1 0:0:0
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">sts</span> <span class="o">=</span> <span class="o">(</span><span class="n">MAX_SECOND</span> <span class="o">-</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">ts</span> <span class="o">/</span> <span class="n">1000</span><span class="o">))</span>
</code></pre></td></tr></table>
</div>
</div><p>这样时间就缩小到了300000000以内。</p>
<p>接下来进行划分，首位标志位不用，剩下63位，然后我划分高33位存分数，1位存标志位，最后29位存时间戳，存储结构是这样的：</p>
<p><img src="https://raw.githubusercontent.com/ld000/git-resources/master/img/20200107114033.png" alt=""></p>
<p>如果要不损失精度，第一段可存储位数 = 53 - 1 - 29 = 23。</p>
<p>第一段最大值 = 2^33 = 8589934591，不损失精度 = 2^23 = 8388607。</p>
<p>第三段最大值 = 2^29 = 536870911。</p>
<ul>
<li>使用时可以适当缩短第三段时间戳的长度，或者不追求时间戳一定精确的话，第一段分数可以超出不损失精度的长度，也只会损失一点时间戳的精度而已。</li>
</ul>
<p>然后就可以用下面的方法计算 score 了，因为是二进制，可以全用位运算。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kt">int</span> <span class="n">size1</span> <span class="o">=</span> <span class="n">33</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">size2</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">size3</span> <span class="o">=</span> <span class="n">29</span><span class="o">;</span>
    
    <span class="kt">long</span> <span class="n">d1Max</span> <span class="o">=</span> <span class="n">maxBySize</span><span class="o">(</span><span class="n">size1</span><span class="o">);</span>
    <span class="kt">long</span> <span class="n">d2Max</span> <span class="o">=</span> <span class="n">maxBySize</span><span class="o">(</span><span class="n">size2</span><span class="o">);</span>
    <span class="kt">long</span> <span class="n">d3Max</span> <span class="o">=</span> <span class="n">maxBySize</span><span class="o">(</span><span class="n">size3</span><span class="o">);</span>
    
    <span class="c1">// 计算 score
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">genScore</span><span class="o">(</span><span class="kt">long</span> <span class="n">d1</span><span class="o">,</span> <span class="kt">long</span> <span class="n">d2</span><span class="o">,</span> <span class="kt">long</span> <span class="n">d3</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">((</span><span class="n">d1</span> <span class="o">&amp;</span> <span class="n">d1Max</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">(</span><span class="n">size2</span> <span class="o">+</span> <span class="n">size3</span><span class="o">))</span> <span class="o">|</span> <span class="o">((</span><span class="n">d2</span> <span class="o">&amp;</span> <span class="n">d2Max</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="n">size3</span><span class="o">)</span> <span class="o">|</span> <span class="o">(</span><span class="n">d3</span> <span class="o">&amp;</span> <span class="n">d3Max</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="c1">// 计算增加 value 值
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">incValue</span><span class="o">(</span><span class="kt">long</span> <span class="n">d1</span><span class="o">)</span> <span class="o">{</span>    
        <span class="k">return</span> <span class="o">((</span><span class="n">d1</span> <span class="o">&amp;</span> <span class="n">d1Max</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">(</span><span class="n">size2</span> <span class="o">+</span> <span class="n">size3</span><span class="o">))</span> <span class="o">|</span> <span class="o">((</span><span class="n">0</span> <span class="o">&amp;</span> <span class="n">d2Max</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="n">size3</span><span class="o">)</span> <span class="o">|</span> <span class="o">(</span><span class="n">0</span> <span class="o">&amp;</span> <span class="n">d3Max</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="c1">// 根据二进制长度计算最大值
</span><span class="c1"></span>    <span class="kd">private</span> <span class="kt">long</span> <span class="nf">maxBySize</span><span class="o">(</span><span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">r</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">len</span><span class="o">--</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">r</span> <span class="o">=</span> <span class="o">((</span><span class="n">r</span> <span class="o">&lt;&lt;</span> <span class="n">1</span><span class="o">)</span> <span class="o">|</span> <span class="n">1</span><span class="o">);</span>
        <span class="o">}</span>
    
        <span class="k">return</span> <span class="n">r</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>增加高位分数的话直接把低维度设为0，计算出分数后调用 ZINCRBY 就行了。</p>
<p>改变低位维度值的话就不能调用 <code>ZINCRBY</code> 了，需要调用<code>ZADD</code>，我们用自旋加 CAS 更新，防止覆盖掉新更新的值。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="cm">/**
</span><span class="cm">     * 设置维度值
</span><span class="cm">     * 
</span><span class="cm">     * @param key zset key
</span><span class="cm">     * @param value zset value
</span><span class="cm">     * @param d2 第二位
</span><span class="cm">     * @param d3 第三位
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">setD</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="n">Long</span> <span class="n">d2</span><span class="o">,</span> <span class="n">Long</span> <span class="n">d3</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">Long</span> <span class="n">oldScore</span><span class="o">;</span>
        <span class="kt">long</span> <span class="n">score</span><span class="o">;</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">originBytes</span><span class="o">;</span>
    
        <span class="k">do</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">((</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">2000</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
    
            <span class="kt">long</span> <span class="n">d1</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
    
            <span class="n">originBytes</span> <span class="o">=</span> <span class="n">zscoreBytes</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
            <span class="n">oldScore</span> <span class="o">=</span> <span class="n">convertZscore</span><span class="o">(</span><span class="n">originBytes</span><span class="o">);</span>
    
            <span class="k">if</span> <span class="o">(</span><span class="n">originBytes</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 根据 score 获取原始值
</span><span class="c1"></span>                <span class="n">d1</span> <span class="o">=</span> <span class="n">getD1ByScore</span><span class="o">(</span><span class="n">oldScore</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="c1">// 如果不设置新值就获取原始值
</span><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">d2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 根据 score 获取原始值
</span><span class="c1"></span>                <span class="n">d2</span> <span class="o">=</span> <span class="n">getD2ByScore</span><span class="o">(</span><span class="n">oldScore</span><span class="o">);</span>
            <span class="o">}</span>
    				<span class="c1">// 如果不设置新值就获取原始值
</span><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">d3</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 根据 score 获取原始值
</span><span class="c1"></span>                <span class="n">d3</span> <span class="o">=</span> <span class="n">getD3ByScore</span><span class="o">(</span><span class="n">oldScore</span><span class="o">);</span>
            <span class="o">}</span>
    
    				<span class="c1">// 生成新值
</span><span class="c1"></span>            <span class="n">score</span> <span class="o">=</span> <span class="n">genScore</span><span class="o">(</span><span class="n">d1</span><span class="o">,</span> <span class="n">d2</span><span class="o">,</span> <span class="n">d3</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">compareAndSetDimension</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">originBytes</span><span class="o">,</span> <span class="n">score</span><span class="o">));</span>
    
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    
    
    <span class="n">Long</span> <span class="n">SUCCESS</span> <span class="o">=</span> <span class="n">1L</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">script</span> <span class="o">=</span> <span class="s">&#34;if (((not (redis.call(&#39;zscore&#39;, KEYS[1], ARGV[1]))) and (ARGV[2] == &#39;&#39;)) &#34;</span> <span class="o">+</span>
                        <span class="s">&#34;or redis.call(&#39;zscore&#39;, KEYS[1], ARGV[1]) == ARGV[2]) &#34;</span> <span class="o">+</span>
                    <span class="s">&#34; then redis.call(&#39;zadd&#39;,KEYS[1],ARGV[3],ARGV[1]) return 1 else return 0 end&#34;</span><span class="o">;</span>
    
    <span class="c1">// CAS 设置值
</span><span class="c1"></span>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">compareAndSetDimension</span><span class="o">(</span><span class="n">String</span> <span class="n">setKey</span><span class="o">,</span> <span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">oldScore</span><span class="o">,</span> <span class="kt">long</span> <span class="n">newScore</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Long</span> <span class="n">result</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">((</span><span class="n">RedisCallback</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;)</span> <span class="n">connection</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">connection</span><span class="o">.</span><span class="na">eval</span><span class="o">(</span><span class="n">script</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="n">ReturnType</span><span class="o">.</span><span class="na">fromJavaType</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">class</span><span class="o">),</span> <span class="n">1</span><span class="o">,</span> <span class="n">setKey</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span>
                        <span class="n">key</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="n">oldScore</span><span class="o">,</span> <span class="n">om</span><span class="o">.</span><span class="na">writeValueAsBytes</span><span class="o">(</span><span class="n">newScore</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonProcessingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
    
        <span class="k">return</span> <span class="n">SUCCESS</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="c1">// 获取原始值
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">zscoreBytes</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">script</span> <span class="o">=</span> <span class="s">&#34;return redis.call(&#39;zscore&#39;, KEYS[1], ARGV[1])&#34;</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">((</span><span class="n">RedisCallback</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[]&gt;)</span> <span class="n">connection</span> <span class="o">-&gt;</span> <span class="n">connection</span><span class="o">.</span><span class="na">eval</span><span class="o">(</span><span class="n">script</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span>
                <span class="n">ReturnType</span><span class="o">.</span><span class="na">fromJavaType</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">),</span>
                <span class="n">1</span><span class="o">,</span> <span class="n">key</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="n">value</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这里初始 score 值获取使用的是 <code>zscoreBytes()</code> 而不是<code>redisTemplate.opsForZSet().score()</code>是为了防止损失精度，这个方法返回的 score 值其实是可能损失精度的，我们看源码分析下：</p>
<p>直接进到最底层的执行方法 <code>zscore</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="c1">// class RedisCommandBuilder
</span><span class="c1"></span>    
    <span class="n">Command</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">,</span> <span class="n">Double</span><span class="o">&gt;</span> <span class="nf">zscore</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">notNullKey</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
    
        <span class="k">return</span> <span class="n">createCommand</span><span class="o">(</span><span class="n">ZSCORE</span><span class="o">,</span> <span class="k">new</span> <span class="n">DoubleOutput</span><span class="o">&lt;&gt;(</span><span class="n">codec</span><span class="o">),</span> <span class="n">key</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p><code>DoubleOutput</code> 将 Redis 的返回值转成 Double</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="c1">// 将 Redis 返回值转成 Double
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">DoubleOutput</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">CommandOutput</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">,</span> <span class="n">Double</span><span class="o">&gt;</span> <span class="o">{</span>
    
        <span class="kd">public</span> <span class="nf">DoubleOutput</span><span class="o">(</span><span class="n">RedisCodec</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">codec</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">codec</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
        <span class="o">}</span>
    
        <span class="c1">// 方法参数 bytes 就是 Redis 返回的原始值了，是个字符串
</span><span class="c1"></span>        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">ByteBuffer</span> <span class="n">bytes</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">output</span> <span class="o">=</span> <span class="o">(</span><span class="n">bytes</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">parseDouble</span><span class="o">(</span><span class="n">decodeAscii</span><span class="o">(</span><span class="n">bytes</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Redis 原始的返回值其实是个类似 <code>1.3094266712875436e+18</code> 的字符串，<code>DoubleOutput</code> 在转换成 Double 的时候有可能会损失精度，用 <code>BigDecimal</code> 转的话是不会丢精度的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">String</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&#34;1.3094266712875436e+18&#34;</span><span class="o">;</span>
    <span class="kt">long</span> <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">longValue</span><span class="o">();</span>
</code></pre></td></tr></table>
</div>
</div><p>所以要不损失精度的话，可以修改下原始方法重新打个包或者用 lua 取出来原始的字符串再转成自己需要的值。</p>
<p>最后利用 <code>genScore</code> 方法就可以生成score值并排序了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">    <span class="c1"># genScore(100, 1, 290072179)</span>
    &gt;zadd r <span class="m">108201125491</span> A
    <span class="s2">&#34;1&#34;</span>
    <span class="c1"># genScore(200, 0, 290072179)</span>
    &gt;zadd r <span class="m">215038436979</span> B
    <span class="s2">&#34;1&#34;</span>
    <span class="c1"># genScore(200, 1, 290072179)</span>
    &gt;zadd r <span class="m">215575307891</span> C
    <span class="s2">&#34;1&#34;</span>
    <span class="c1"># genScore(400, 0, 290072179)</span>
    &gt;zadd r <span class="m">429786801779</span> D
    <span class="s2">&#34;1&#34;</span>
    <span class="c1"># genScore(200, 1, 290081199)</span>
    &gt;zadd r <span class="m">215575316911</span> E
    <span class="s2">&#34;1&#34;</span>
    &gt;zrange r <span class="m">0</span> -1 withscores
     1<span class="o">)</span>  <span class="s2">&#34;A&#34;</span>
     2<span class="o">)</span>  <span class="s2">&#34;108201125491&#34;</span>
     3<span class="o">)</span>  <span class="s2">&#34;B&#34;</span>
     4<span class="o">)</span>  <span class="s2">&#34;215038436979&#34;</span>
     5<span class="o">)</span>  <span class="s2">&#34;C&#34;</span>
     6<span class="o">)</span>  <span class="s2">&#34;215575307891&#34;</span>
     7<span class="o">)</span>  <span class="s2">&#34;E&#34;</span>
     8<span class="o">)</span>  <span class="s2">&#34;215575316911&#34;</span>
     9<span class="o">)</span>  <span class="s2">&#34;D&#34;</span>
     10<span class="o">)</span>  <span class="s2">&#34;429786801779&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="3-直接拆分-double">3. 直接拆分 double</h3>
<p>可以用二进制拆分当然也可以直接拆分十进制数，为了方便，还可以用小数划分维度，比如将分数放在整数位，标志位和时间戳放在小数位。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">    A 100.1290072179
    B 200.0290072179
    C 200.1290072179
    D 400.0290072179
    E 200.1290081199
</code></pre></td></tr></table>
</div>
</div><p>不过这样不丢精度存储的分数比二进制拆分小。</p>
<p>原理和二进制拆分一样，就不赘述了。</p>
<h2 id="总结">总结</h2>
<p>数据量不大的情况下直接使用 RDB 就可以了，比较方便。用 Redis 的时候，一级以外的维度不变的情况下可以直接用 key 排序，比较简单，如果维度会更新，可以使用拆分二进制或十进制的方法存储，二进制的优点是存储的数比较大，而且可以用位运算，十进制的优点是计算简单，可读性比较好。各个维度的长度还可以做成配置项，这样就可以满足不同的业务需求了。</p>
]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/java/">java</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>MacOS 用 automater 自动备份安装的软件列表</title>
                <link>https://ld000.space/post/automator_brewfile/</link>
                <guid isPermaLink="true">https://ld000.space/post/automator_brewfile/</guid>
                <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
                
                    <author>voidd247@outlook.com (Voiddd)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>不知道有没有人经历过重装系统后需要把所有软件都重装一遍的痛苦，而且很有可能落下几个软件没装，等到用的时候才发现，重新下载再重新配置，时间不知不觉就没了。</p>
<p>所以要是能把安装过的软件列表都备份下来就好了。mac 上正好就有这样一个软件 <code>brew</code>。</p>
<h2 id="准备">准备</h2>
<p><code>brew</code> 是 Mac 下的一个包管理工具，类似 Ubuntu 的 apt，可以方便的安装各种软件。</p>
<blockquote>
<p><a href="https://brew.sh/">https://brew.sh/</a></p>
</blockquote>
<p>靠一行命令就可以安装：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">    /usr/bin/ruby -e <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class="k">)</span><span class="s2">&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>安装好后就可以靠命令来快速安装软件了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">    <span class="c1"># 安装不带界面的命令行下的工具或三方库</span>
    brew install wget
    <span class="c1"># 安装带界面的应用程序</span>
    brew cask install firefox
</code></pre></td></tr></table>
</div>
</div><p>还可以安装 <code>mas</code>来管理 App Store 下载的软件</p>
<blockquote>
<p><a href="https://github.com/mas-cli/mas">https://github.com/mas-cli/mas</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">    brew install mas
</code></pre></td></tr></table>
</div>
</div><p>之后我们就可以执行命令将安装过的软件列表导出了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">    brew bundle dump --force --describe
</code></pre></td></tr></table>
</div>
</div><p>执行上面命令后会导出个 Brewfile 文件，里面大概长这样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">    tap <span class="s2">&#34;homebrew/bundle&#34;</span>
    tap <span class="s2">&#34;homebrew/cask&#34;</span>
    tap <span class="s2">&#34;homebrew/core&#34;</span>
    
    brew <span class="s2">&#34;bazaar&#34;</span>
    
    cask <span class="s2">&#34;docker&#34;</span>
    
    mas <span class="s2">&#34;iMovie 剪辑&#34;</span>, id: <span class="m">408981434</span>
</code></pre></td></tr></table>
</div>
</div><p>记录了通过 brew 和 App Store 安装的软件，之后可以通过 <code>brew bundle --file=&quot;./Brewfile&quot;</code>导入。</p>
<h2 id="automator-配置">Automator 配置</h2>
<p>Automator 是 masOS 下的一个自动操作工具</p>
<blockquote>
<p>“自动操作”能让电脑上的大部分操作自动进行。有了“自动操作”，要创建自动化操作，您不必了解复杂的编程或脚本语言，只需使用“自动操作”资源库中数百个可用操作中的任意一些，便可以创建工作流程。这些操作能与各种 App 和 macOS 的部分程序进行互动。工作流程可以简单到只有一个操作，也可以包含许多操作以执行一系列复杂的任务。</p>
</blockquote>
<blockquote>
<p><a href="https://support.apple.com/zh-cn/guide/automator/welcome/mac">https://support.apple.com/zh-cn/guide/automator/welcome/mac</a></p>
</blockquote>
<p>我们可以通过 Automator 创建个自动备份 Brewfile 的程序，还可以同步到 GitHub 上防止丢失。</p>
<p>首先创建一个日历提醒</p>
<p><img src="/img/automator_brewfile/automator1.png" alt=""></p>
<p>在左侧资源库中选择运行 Shell 脚本</p>
<p><img src="/img/automator_brewfile/automator2.png" alt=""></p>
<p>然后填写上导出 Brewfile 的命令</p>
<p><img src="/img/automator_brewfile/automator3.png" alt=""></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">    <span class="nb">cd</span> ~/workspace/github-self/mac-init
    <span class="c1"># 导出 Brewfile，注意 brew 命令要写全路径</span>
    /usr/local/bin/brew bundle dump --force --describe
    
    <span class="c1"># 以下是提交 GitHub</span>
    git add --all
    git commit -m <span class="s2">&#34;update brewfile&#34;</span>
    git pull
    git push
</code></pre></td></tr></table>
</div>
</div><p>写好后可以点击右上角的运行按钮来测试下，打开结果可以看到运行输出</p>
<p><img src="/img/automator_brewfile/automator4.png" alt=""></p>
<p>之后 ctrl+s 保存，输入文件名后会自动创建一个日历提醒，重复里选上每周，之后就可以让电脑自动备份安装过的软件列表了。</p>
<p><img src="/img/automator_brewfile/automator5.png" alt=""></p>
<p>下次在新电脑上就可以执行<code>brew bundle --file=&quot;./Brewfile&quot;</code>来恢复安装过的软件了，是不是很方便呢。</p>
<p>如果怕忘了命令还可以写个脚本来自动执行，比如我的 <a href="https://github.com/ld000/mac-init"><code>https://github.com/ld000/mac-init</code></a>。</p>
]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/automater/">automater</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>discuz 接入 cas</title>
                <link>https://ld000.space/post/discuz_cas/</link>
                <guid isPermaLink="true">https://ld000.space/post/discuz_cas/</guid>
                <pubDate>Mon, 23 Jul 2018 00:00:00 +0000</pubDate>
                
                    <author>voidd247@outlook.com (Voiddd)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>discuz 接入 cas 实现 SSO 的方法。</p>
<h2 id="版本">版本</h2>
<ul>
<li>Discuz 3.3</li>
<li>Cas 5.x</li>
</ul>
<h2 id="下载-casphp-插件">下载 casPHP 插件</h2>
<p><code>http://developer.jasig.org/cas-clients/php/</code></p>
<p>我这里用的 1.3.0，下载完后解压拷贝到 discuz 根目录，重命名为 <code>CAS</code>。</p>
<h2 id="去除登录输入">去除登录输入</h2>
<p>修改 <code>template/default/member/login_simple.htm</code></p>
<ul>
<li>
<p>删除8-29行代码，删除31-32行代码</p>
</li>
<li>
<p>添加以下代码，支持访问时 force 登录.</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># 需要 CAS 打开允许 iframe, 否则报错: Refused to display &#39;URL&#39; in a frame because it set &#39;X-Frame-Options&#39; to &#39;DENY&#39;</span>
<span class="c1"># cas 配置：cas.httpWebRequest.header.xframe=false</span>
&lt;script <span class="nv">type</span><span class="o">=</span><span class="s2">&#34;text/javascript&#34;</span>&gt;
<span class="o">(</span><span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
       var <span class="nv">_body</span> <span class="o">=</span> document.body <span class="o">||</span> document.getElementsByTagName<span class="o">(</span><span class="s1">&#39;body&#39;</span><span class="o">)[</span>0<span class="o">]</span><span class="p">;</span>
       var <span class="nv">iframe</span> <span class="o">=</span> document.createElement<span class="o">(</span><span class="s1">&#39;iframe&#39;</span><span class="o">)</span><span class="p">;</span>
       iframe.id <span class="o">=</span> <span class="s1">&#39;logcheck&#39;</span><span class="p">;</span>

       iframe.src <span class="o">=</span> <span class="s2">&#34;member.php?&#34;</span>+<span class="o">((</span><span class="s2">&#34;mod=logging&amp;action=loginCheck&#34;</span><span class="o">))</span><span class="p">;</span>
       iframe.style.display <span class="o">=</span> <span class="s1">&#39;none&#39;</span><span class="p">;</span>
       _body.appendChild<span class="o">(</span>iframe<span class="o">)</span><span class="p">;</span>
   <span class="o">})()</span><span class="p">;</span>
&lt;/script&gt;

<span class="c1"># TODO 现只能在 CAS 登录后才能登录，需做修改</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="去除弹框登录">去除弹框登录</h2>
<p>管理中心 -&gt; 界面 -&gt; 去掉浮动窗口（登录）</p>
<p><img src="/img/discuz-cas-1.png" alt="image"></p>
<h2 id="在cas文件夹中创建-casclientconfigphp">在<code>CAS</code>文件夹中创建 <code>CasClientConfig.php</code></h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nx">define</span> <span class="p">(</span> <span class="s1">&#39;CAS_SERVER_HOSTNAME&#39;</span><span class="p">,</span> <span class="s1">&#39;cas.com&#39;</span> <span class="p">);</span>
<span class="nx">define</span> <span class="p">(</span> <span class="s1">&#39;CAS_SERVER_PORT&#39;</span><span class="p">,</span> <span class="mi">8080</span> <span class="p">);</span> 
<span class="nx">define</span> <span class="p">(</span> <span class="s1">&#39;CAS_SERVER_APP_NAME&#39;</span><span class="p">,</span> <span class="s2">&#34;cas&#34;</span> <span class="p">);</span> 
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="在cas文件夹中创建-casclientphp">在<code>CAS</code>文件夹中创建 <code>CasClient.php</code></h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">require_once</span> <span class="nx">DISCUZ_ROOT</span><span class="o">.</span><span class="s1">&#39;./CAS/CasClientConfig.php&#39;</span><span class="p">;</span> <span class="c1">// 注意
</span><span class="c1"></span><span class="k">require_once</span> <span class="nx">DISCUZ_ROOT</span><span class="o">.</span><span class="s1">&#39;./CAS/CAS.php&#39;</span><span class="p">;</span> <span class="c1">// 注意
</span><span class="c1"></span>                                                  
<span class="c1">// 初始化
</span><span class="c1">//phpCAS::setDebug ();
</span><span class="c1"></span> 
<span class="c1">// initialize phpCAS
</span><span class="c1"></span><span class="nx">phpCAS</span><span class="o">::</span><span class="na">client</span> <span class="p">(</span> <span class="nx">CAS_VERSION_2_0</span><span class="p">,</span> <span class="nx">CAS_SERVER_HOSTNAME</span><span class="p">,</span> <span class="nx">CAS_SERVER_PORT</span><span class="p">,</span> <span class="nx">CAS_SERVER_APP_NAME</span> <span class="p">);</span>
 
<span class="c1">// no SSL validation for the CAS server
</span><span class="c1"></span><span class="nx">phpCAS</span><span class="o">::</span><span class="na">setNoCasServerValidation</span> <span class="p">();</span>

<span class="nx">phpCAS</span><span class="o">::</span><span class="na">setNoClearTicketsFromUrl</span> <span class="p">();</span>
<span class="nx">phpCAS</span><span class="o">::</span><span class="na">handleLogoutRequests</span><span class="p">();</span>

<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="sourceclassclass_corephp第16行加入">source/class/class_core.php第16行加入</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">require_once DISCUZ_ROOT.&#34;CAS/CasClient.php&#34;;
</code></pre></td></tr></table>
</div>
</div><h2 id="uc_clientcontroluserphp">uc_client/control/user.php</h2>
<p>134行注释</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">// elseif($user[&#39;password&#39;] != md5($passwordmd5.$user[&#39;salt&#39;])) {
// $status = -2;
// } elseif($checkques <span class="err">&amp;&amp;</span> $user[&#39;secques&#39;] != $_ENV[&#39;user&#39;]-&gt;quescrypt($questionid, $answer)) {
// $status = -3;
// }
</code></pre></td></tr></table>
</div>
</div><p>注释 <code>onsynlogin</code>, <code>onsynlogout</code>, <code>onregister</code>方法</p>
<h2 id="sourcefunctionfunction_memberphp-加入">source/function/function_member.php 加入</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">// 新加的方法，用以支持CAS 登录
function userloginCas($username, $ip = &#39;&#39;) {
    $return = array ();
    
    if(!function_exists(&#39;uc_user_login&#39;)) {
        loaducenter();
    }

    $return[&#39;ucresult&#39;] = uc_user_login(addslashes($username), &#39;&#39;, 0, 0,&#39;&#39;, &#39;&#39;, $ip);

    $tmp = array ();
    $duplicate = &#39;&#39;;
    list ( $tmp [&#39;uid&#39;], $tmp [&#39;username&#39;], $tmp [&#39;password&#39;], $tmp [&#39;email&#39;], $duplicate ) = $return [&#39;ucresult&#39;];
    $return [&#39;ucresult&#39;] = $tmp;
    if ($duplicate <span class="err">&amp;&amp;</span> $return [&#39;ucresult&#39;] [&#39;uid&#39;] &gt; 0 || $return [&#39;ucresult&#39;] [&#39;uid&#39;] <span class="err">&lt;</span>= 0) {
        $return [&#39;status&#39;] = 0;
        return $return;
    }
    
    $member = getuserbyuid ( $return [&#39;ucresult&#39;] [&#39;uid&#39;], 1 );
    if (! $member || empty ( $member [&#39;uid&#39;] )) {
        $return [&#39;status&#39;] = - 1;
        return $return;
    }
    $return [&#39;member&#39;] = $member;
    $return [&#39;status&#39;] = 1;
    if ($member [&#39;_inarchive&#39;]) {
        C::t ( &#39;common_member_archive&#39; )-&gt;move_to_master ( $member [&#39;uid&#39;] );
    }
    if ($member [&#39;email&#39;] != $return [&#39;ucresult&#39;] [&#39;email&#39;]) {
        C::t ( &#39;common_member&#39; )-&gt;update ( $return [&#39;ucresult&#39;] [&#39;uid&#39;], array (
                &#39;email&#39; =&gt; $return [&#39;ucresult&#39;] [&#39;email&#39;] 
        ) );
    }
    
    return $return;
}
</code></pre></td></tr></table>
</div>
</div><h2 id="sourceclassclass_memberphp">source/class/class_member.php</h2>
<p>51行注释并改为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">// if(!submitcheck(&#39;loginsubmit&#39;, 1, $seccodestatus)) {
if (1 == 2) {
</code></pre></td></tr></table>
</div>
</div><p>92行 <code>$_G['username'] = $_G['member']['username'] = $_G['member']['password'] = ''</code> 后加入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">phpCAS::setNoClearTicketsFromUrl ();
// 这里会检测服务器端的退出的通知，就能实现php和其他语言平台间同步登出了  
phpCAS::handleLogoutRequests();  
$username=&#39;&#39;;
if(phpCAS::isAuthenticated()){  
    $username = phpCAS::getUser ();
} else {
    $service =  $_SERVER[&#39;HTTP_REFERER&#39;];
    phpCAS::setServerLoginUrl(phpCAS::getServerLoginURL().urlencode(&#34;?service=&#34;.$service));

    phpCAS::forceAuthentication ();
}
// if(!$_GET[&#39;password&#39;] || $_GET[&#39;password&#39;] != addslashes($_GET[&#39;password&#39;])) {
// showmessage(&#39;profile_passwd_illegal&#39;);
// }
// $result = userlogin($_GET[&#39;username&#39;], $_GET[&#39;password&#39;], $_GET[&#39;questionid&#39;], $_GET[&#39;answer&#39;], $this-&gt;setting[&#39;autoidselect&#39;] ? &#39;auto&#39; : $_GET[&#39;loginfield&#39;], $_G[&#39;clientip&#39;]);
$result = userloginCas($username, $_G[&#39;clientip&#39;]);
</code></pre></td></tr></table>
</div>
</div><p>347行 <code>on_logout</code> 方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">if(defined(&#39;IN_MOBILE&#39;)) {
    showmessage(&#39;location_logout_succeed_mobile&#39;, dreferer(), array(&#39;formhash&#39; =&gt; FORMHASH, &#39;referer&#39; =&gt; rawurlencode(dreferer())));
} else {
    $service =  $_SERVER[&#39;HTTP_REFERER&#39;];
    phpCAS::logoutWithRedirectService ( $service );
// showmessage(&#39;logout_succeed&#39;, dreferer(), array(&#39;formhash&#39; =&gt; FORMHASH, &#39;ucsynlogout&#39; =&gt; $ucsynlogout, &#39;referer&#39; =&gt; rawurlencode(dreferer())));
}
</code></pre></td></tr></table>
</div>
</div><p>386行 <code>on_register</code>方法中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">if(strpos($url_forward, $this-&gt;setting[&#39;regname&#39;]) !== false) {
    $url_forward = &#39;forum.php&#39;;
}
// 修改掉防止当登录成功时无限跳转
$url_forward = &#39;forum.php&#39;;
</code></pre></td></tr></table>
</div>
</div><p><code>logging_ctl</code>类中 添加异步登录验证方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">function on_loginCheck(){
    global $_G;
    $username=&#39;&#39;;
    if(phpCAS::isAuthenticated()){
        $username = phpCAS::getUser ();
    } else {
        phpCAS::setServerLoginUrl(phpCAS::getServerLoginURL());
        phpCAS::forceAuthentication ();
    }
    $result = userloginCas($username, $_G[&#39;clientip&#39;]);

    if($data = uc_get_user($username)) {
        list($uid, $username, $email) = $data;      //根据用户名获取uid进行登录
    } else {
        dexit();
    }

    if($uid &gt; 0) {
        $member = getuserbyuid($uid, 1);            //根据uid获取用户表pre_common_member中的所有字段

        $_G[&#39;uid&#39;] = intval($uid);
        $_G[&#39;username&#39;] = $username;
        $_G[&#39;adminid&#39;] = $member[&#39;adminid&#39;];
        $_G[&#39;groupid&#39;] = $member[&#39;groupid&#39;];
        $_G[&#39;formhash&#39;] = formhash();
        $_G[&#39;session&#39;][&#39;invisible&#39;] = getuserprofile(&#39;invisible&#39;);
        $_G[&#39;member&#39;] = $member;
        loadcache(&#39;usergroup_&#39;.$_G[&#39;groupid&#39;]);
        C::app()-&gt;session-&gt;isnew = true;
        C::app()-&gt;session-&gt;updatesession();

        dsetcookie(&#39;auth&#39;, authcode(&#34;{$member[&#39;password&#39;]}\t{$member[&#39;uid&#39;]}&#34;, &#39;ENCODE&#39;), $cookietime, 1, true);        //这里的passwod是pre_common_member表中经过加密后的密码
        dsetcookie(&#39;loginuser&#39;,$username);
        dsetcookie(&#39;activationauth&#39;);
        dsetcookie(&#39;pmnum&#39;);

        dexit(&#39;<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span><span class="nb">window</span><span class="p">.</span><span class="nx">top</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">reload</span><span class="p">();&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>&#39;);
    } else {
        dexit();
    }
}
</code></pre></td></tr></table>
</div>
</div><h2 id="sourcemodulemembermember_loggingphp-添加允许-logincheck-方法通过">source/module/member/member_logging.php 添加允许 <code>loginCheck</code> 方法通过</h2>
<p>第15行改为 <code>if(!in_array($_GET['action'], array('login', 'logout','loginCheck'))) </code></p>
<h2 id="额外配置可选">额外配置，可选</h2>
<h3 id="自动httpshttp">自动https/http</h3>
<p><code>CAS/CAS/Client.php</code></p>
<p>299行
<code>$this-&gt;_server['base_url'] = 'https://' . $this-&gt;_getServerHostname();</code>
改为
<code>$this-&gt;_server['base_url'] = ($this-&gt;_isHttps() ? 'https':'http').'://'. $this-&gt;_getServerHostname();</code></p>
<h3 id="关闭gateway">关闭gateway</h3>
<p><code>CAS/CAS/Client.php</code></p>
<p>1164行
<code>$this-&gt;redirectToCas(true/* gateway */);</code>
改为
<code>$this-&gt;redirectToCas(false/* gateway */);</code></p>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/discuz/">discuz</category>
                                
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/cas/">cas</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>java 调用 c# 的方法</title>
                <link>https://ld000.space/post/java_call_cnet/</link>
                <guid isPermaLink="true">https://ld000.space/post/java_call_cnet/</guid>
                <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
                
                    <author>voidd247@outlook.com (Voiddd)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>java 调用 c# 程序的几种方式。</p>
<h1 id="native-java">Native Java</h1>
<p>Java不能直接调用C#的dll，这是因为C#和Java一样，也是运行在虚拟机上的语言，所生成的dll并不是和C++一样的native dll，因此没有办法使用JNI进行直接调用。</p>
<p>Java调用C#的基本思路是：</p>
<p>Java &lt;=== JNI ===&gt; C++ Native dll &lt;=== CLR ===&gt; C# dll</p>
<p>给C# dll做一个C++的wrapper，Java与C++之间通过JNI实现调用，而C++和C#之间通过CLR实现调用。</p>
<p><strong>这样做有个缺陷就是不能在 linux 上运行。</strong></p>
<p>有以下几种方法实现：</p>
<h2 id="jni4net">jni4net</h2>
<p>github: <a href="https://github.com/jni4net/jni4net">https://github.com/jni4net/jni4net</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">testlib.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">net.sf.jni4net.Bridge</span><span class="o">;</span>
<span class="o">...</span>
        <span class="k">try</span> <span class="o">{</span>

            <span class="n">Bridge</span><span class="o">.</span><span class="na">setVerbose</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="n">Bridge</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>

            <span class="n">Bridge</span><span class="o">.</span><span class="na">LoadAndRegisterAssemblyFrom</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&#34;testlib.j4n.dll&#34;</span><span class="o">));</span>

        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// TODO Auto-generated catch block
</span><span class="c1"></span>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="n">Test</span> <span class="n">test</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Test</span><span class="o">();</span>
        <span class="n">test</span><span class="o">.</span><span class="na">Hello</span><span class="o">();</span>
        <span class="n">test</span><span class="o">.</span><span class="na">Repeat</span><span class="o">(</span><span class="s">&#34;It works!&#34;</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>缺点：</p>
<ol>
<li>很长时间没更新了</li>
<li>不支持在 Mono 和 Linux 上运行。原文：<a href="http://zamboch.blogspot.cz/2010/04/jni4net-not-yet-on-mono-linux.html">It's not supported at the moment, sorry</a></li>
<li>性能一般</li>
</ol>
<h2 id="javonet">javonet</h2>
<p>按年收费</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">GenerateRandomNumber</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">JavonetException</span> <span class="o">{</span>
    <span class="n">NObject</span> <span class="n">objRandom</span> <span class="o">=</span> <span class="n">Javonet</span><span class="o">.</span><span class="na">New</span><span class="o">(</span><span class="s">&#34;System.Random&#34;</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">objRandom</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="s">&#34;Next&#34;</span><span class="o">,</span><span class="n">10</span><span class="o">,</span><span class="n">20</span><span class="o">);</span>

    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="自己实现一个c-native-dll作为你的c-dll的代理">自己实现一个C++ native dll作为你的C# dll的代理</h2>
<p>基本的实现思路是：</p>
<ol>
<li>对应你的C# dll，写一套Java版本的API。</li>
<li>使用javah命令，将Java API翻译成对应的C++ API，并输出到对应的xxxxJNI.h文件中。</li>
<li>创建C++ dll工程，添加xxxxJNI.h以及jdk提供的jni.h和jni_md.h，并启用clr支持。</li>
<li>在C++ dll工程中通过managed C++调用你的C#dll，进而实现所有的C++ API。</li>
</ol>
<p>操作过程可参考  <a href="https://www.codeproject.com/Articles/378826/How-to-wrap-a-Csharp-library-for-use-in-Java">How-to-wrap-a-Csharp-library-for-use-in-Java</a> 和 <a href="http://www.iteye.com/topic/1133867">Java 调用 C# DLL</a>.</p>
<h1 id="使用中间文件做交互">使用中间文件做交互</h1>
<p>可以把输入和输出存到一个中间文本文件中(json, csv, txt)，让 c# 程序调用，然后输出一个文本文件。</p>
<p>缺点：</p>
<ol>
<li>过程繁琐。</li>
<li>java 和 c# 方都无法感知对方处理进度，无法方便的确定输入输出完成时间。(可以在文本结尾放置一段特殊字符作为处理结束标志)</li>
<li>程序异常不好发现。</li>
</ol>
<h1 id="接口调用">接口调用</h1>
<p>c# 将输入封装成 http 或 socket 接口，供 java 调用。c# 程序编译成 exe，在安装了 Mono 的 Linux 机器上运行，或运行在 Mono Docker 镜像中。</p>
<hr>
<p>参考</p>
<blockquote>
<p><a href="http://ju.outofmemory.cn/entry/153844">http://ju.outofmemory.cn/entry/153844</a></p>
</blockquote>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/java/">java</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>翻译: Spring AOP 讨论最多的问题 #1 - aspects 没有生效</title>
                <link>https://ld000.space/post/aspects_are_not_applied/</link>
                <guid isPermaLink="true">https://ld000.space/post/aspects_are_not_applied/</guid>
                <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
                
                    <author>voidd247@outlook.com (Voiddd)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<blockquote>
<p>原文：http://denis-zhdanov.blogspot.com/2009/07/spring-aop-top-problem-1-aspects-are.html</p>
</blockquote>
<p>这篇文章继续讨论从 <a href="http://denis-zhdanov.blogspot.com/2009/05/spring-aop-top-problem-2.html">Spring AOP top problem #2 - java.lang.ClassCastException: $Proxy7</a> 开始的话题。在这个话题里，我想要说明一些现在接触 spring AOP 的 spring 用户(特别是新用户)讨论最多(从我的观点看来)的问题。</p>
<p>现在我想要聊一聊自身调用('self-calls')，如果你有这方面的经验可以跳过接下来的内容.</p>
<p>请注意 spring 文档也描述了一个同样的问题 - <a href="http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/ch08s06.html#aop-understanding-aop-proxies">8.6.1 Understanding AOP proxies</a>。然而，我发现通过 spring 论坛里的很多文章显示人们并没有发现这个问题。所以，我想要把这个问题解释的更明白些 / 用我的语言。</p>
<p>让我们创建一个说明这个问题的例子。假设我们是 spring 的新用户而且用 spring aop 写了一个非常酷的代码，并且运行的很好。</p>
<p><code>AopService.java</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.spring.aop</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AopService</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;AopService.service()&#34;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">anotherService</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;AopService.anotherService()&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p><code>TestAspect.java</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.spring.aop</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.aspectj.lang.ProceedingJoinPoint</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Aspect</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Around</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="nd">@Aspect</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestAspect</span> <span class="o">{</span>

    <span class="nd">@Around</span><span class="o">(</span><span class="s">&#34;execution(* com.spring.aop.AopService.*(..))&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">advice</span><span class="o">(</span><span class="n">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;TestAspect.advice()&#34;</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></td></tr></table>
</div>
</div><p><code>spring-config.xml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">
<span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
       <span class="na">xmlns:aop=</span><span class="s">&#34;http://www.springframework.org/schema/aop&#34;</span>
       <span class="na">xmlns:context=</span><span class="s">&#34;http://www.springframework.org/schema/context&#34;</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;
</span><span class="s">  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
</span><span class="s">  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
</span><span class="s">  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd&#34;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&#34;com.spring.aop&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;aop:aspectj-autoproxy/&gt;</span>

<span class="nt">&lt;/beans&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p><code>SpringStart.java</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.spring</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.spring.aop.AopService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringStart</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">ClassPathXmlApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;spring-config.xml&#34;</span><span class="o">);</span>
        <span class="n">AopService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeansOfType</span><span class="o">(</span><span class="n">AopService</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">values</span><span class="o">().</span><span class="na">iterator</span><span class="o">().</span><span class="na">next</span><span class="o">();</span>
        <span class="n">service</span><span class="o">.</span><span class="na">service</span><span class="o">();</span>
        <span class="n">service</span><span class="o">.</span><span class="na">anotherService</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>我们创建了一个包含简单的只会打印一些输出来说明被调用过的方法和简单的 aspect 注入这个类中所有 public 方法并且打印信息来说明注入被执行了的 service 类。如果我们执行 <code>SpringStart</code> 类，我们会看到期望的输出 - 方法都被注入成功。</p>
<pre><code>TestAspect.advice()
AopService.service()
TestAspect.advice()
AopService.anotherService()
</code></pre><p>让我们稍微拓展下 service 类。</p>
<p><code>AopService.java</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.spring.aop</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AopService</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;AopService.service()&#34;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">anotherService</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;AopService.anotherService(). Calling AopService.service()...&#34;</span><span class="o">);</span>
        <span class="n">service</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>我们期望 aspect 执行 3次 - <code>service()</code> 和 <code>anotherService()</code> 在 <code>SpringStart.main()</code> 中调用，<code>service()</code> 在 <code>AopService.anotherService()</code> 中调用。然而，如果我们运行这个例子我们发现 aspect 只执行了两次（从 <code>SpringStart.main()</code> 开始执行）i.e. <code>AopService.anotherService()</code> 中调用的 <code>service()</code> 没有被注入。</p>
<pre><code>TestAspect.advice()
AopService.service()
TestAspect.advice()
AopService.anotherService(). Calling AopService.service()...
AopService.service()
</code></pre><p>通常，problem root is tightly connected to <a href="https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/">The Law of Leaky Abstractions</a>。I.e. 我们对 aspect 的表现有特别的期待但是没有发现 spring aop 的规则不允许这些期待实现。</p>
<p>通常的解释是 spring AOP 是基于代理(proxy-based)的，i.e. 他假定当 bean 作为依赖被使用，他的方法应该用 aspect 代理包裹(be advised by particular aspect(s) the container injects aspect-aware bean proxy)而不是 bean 本身。例如，返回的代理使用和和下面代码近似的方法:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AopServiceProxy</span> <span class="o">{</span>

    <span class="c1">// Assuming that corresponding setters are introduced and the fields are defined.
</span><span class="c1"></span>    <span class="kd">private</span> <span class="n">TestAspect</span> <span class="n">aspect</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">AopService</span> <span class="n">rawService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">aspect</span><span class="o">.</span><span class="na">advice</span><span class="o">();</span>
        <span class="n">rawService</span><span class="o">.</span><span class="na">service</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">anotherService</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">aspect</span><span class="o">.</span><span class="na">advice</span><span class="o">();</span>
        <span class="n">anotherService</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>I.e. 这个代理被 aspect 包裹而且在调用 <code>raw</code> bean 前他调用了必要的 aspect 方法。然而，上一个 <code>AopService</code> 实现在 <code>anotherService()</code> 内调用了 <code>service()</code> - 这样代理无法注入因为这样调用违反了 'this' 原则, i.e. 这个方法是 'rawBean' 自己调用的。这就是为什么 aspect 在这种情况下不起作用的答案。</p>
<p>现在，当我们明白了问题原因我们来聊聊怎么解决它。至少有三种方法：</p>
<ul>
<li>
<p><strong>aspect 建议重写代码来避免 self-calls</strong> - 非常不方便，特别是如果你在维护遗留代码;</p>
</li>
<li>
<p><strong>用 aspect-aware proxy 替换 self-calls, i.e. 在 anotherService() 里用 ((AopService) AopContext.currentProxy()).service() 代替 service()</strong> - 也不方便，需要额外设置代理而且和 spring 的代码重复;</p>
</li>
<li>
<p><strong>用 aspectj weaving</strong> - 这是我喜欢的方案。他会直接注入 aspect 到对应的 class 里， i.e. 不需要所有的方法都必须被代理;</p>
</li>
</ul>
<p>我会写一篇文章来说明在 spring 中怎么使用各种类型的 aspectj weaving，这样会更加清楚的说明这个问题。</p>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/aspect/">aspect</category>
                                
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/spring/">spring</category>
                                
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/java/">java</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>响应模式</title>
                <link>https://ld000.space/post/xyms/</link>
                <guid isPermaLink="true">https://ld000.space/post/xyms/</guid>
                <pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate>
                
                    <author>voidd247@outlook.com (Voiddd)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h1 id="常见响应模式">常见响应模式</h1>
<ul>
<li>大体流动模型(mostly fluid)</li>
<li>掉落列模型(column drop)</li>
<li>活动布局模型(layout shifter)</li>
<li>画布溢出模型(off canvas)</li>
</ul>
<h2 id="掉落列模型">掉落列模型</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;container&#34;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;box dark_blue&#34;</span><span class="o">&gt;&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;box light_blue&#34;</span><span class="o">&gt;&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;box green&#34;</span><span class="o">&gt;&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>

<span class="p">.</span><span class="nc">container</span> <span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
  <span class="k">flex-wrap</span><span class="p">:</span> <span class="kc">wrap</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nc">box</span> <span class="p">{</span>
  <span class="k">width</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">@</span><span class="k">media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">450px</span><span class="o">)</span> <span class="p">{</span>
  <span class="p">.</span><span class="nc">dark-blue</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">25</span><span class="kt">%</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">.</span><span class="nc">light-blue</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">75</span><span class="kt">%</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="p">@</span><span class="k">media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">550px</span><span class="o">)</span> <span class="p">{</span>
  <span class="p">.</span><span class="nc">dark-blue</span><span class="o">,</span>
  <span class="p">.</span><span class="nc">green</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">25</span><span class="kt">%</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">.</span><span class="nc">light-blue</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="大体流动模型">大体流动模型</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;container&#34;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;box dark_blue&#34;</span><span class="o">&gt;&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;box light_blue&#34;</span><span class="o">&gt;&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;box green&#34;</span><span class="o">&gt;&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;box red&#34;</span><span class="o">&gt;&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;box orange&#34;</span><span class="o">&gt;&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>

<span class="p">.</span><span class="nc">container</span> <span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
  <span class="k">flex-wrap</span><span class="p">:</span> <span class="kc">wrap</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nc">box</span> <span class="p">{</span>
  <span class="k">width</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">@</span><span class="k">media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">450px</span><span class="o">)</span> <span class="p">{</span>
  <span class="p">.</span><span class="nc">light-blue</span><span class="o">,</span>
  <span class="p">.</span><span class="nc">green</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="p">@</span><span class="k">media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">550px</span><span class="o">)</span> <span class="p">{</span>
  <span class="p">.</span><span class="nc">dark-blue</span><span class="o">,</span>
  <span class="p">.</span><span class="nc">light-blue</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">.</span><span class="nc">red</span><span class="o">,</span>
  <span class="p">.</span><span class="nc">green</span><span class="o">,</span>
  <span class="p">.</span><span class="nc">orange</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mf">33.333333</span><span class="kt">%</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="p">@</span><span class="k">media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">700px</span><span class="o">)</span> <span class="p">{</span>
  <span class="p">.</span><span class="nc">container</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">700</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">margin-left</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
    <span class="k">margin-right</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="活动布局模型">活动布局模型</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;container&#34;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;box dark_blue&#34;</span><span class="o">&gt;&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;container&#34;</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&#34;container2&#34;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;box light_blue&#34;</span><span class="o">&gt;&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;box green&#34;</span><span class="o">&gt;&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&#34;box red&#34;</span><span class="o">&gt;&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>

<span class="p">.</span><span class="nc">container</span> <span class="p">{</span>
  <span class="k">width</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>  <span class="c">/* .ddd */</span>
  <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
  <span class="k">flex-wrap</span><span class="p">:</span> <span class="kc">wrap</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nc">box</span> <span class="p">{</span>
  <span class="k">width</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">@</span><span class="k">media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">500px</span><span class="o">)</span> <span class="p">{</span>
  <span class="p">.</span><span class="nc">dark-blue</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">#</span><span class="nn">container2</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="p">@</span><span class="k">media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">600px</span><span class="o">)</span> <span class="p">{</span>
  <span class="p">.</span><span class="nc">dark-blue</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">25</span><span class="kt">%</span><span class="p">;</span>
    <span class="k">order</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">#</span><span class="nn">container2</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">red</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">25</span><span class="kt">%</span><span class="p">;</span>
    <span class="k">order</span><span class="p">:</span> <span class="mi">-1</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="画布溢出模型">画布溢出模型</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="c">&lt;!-- saved from url=(0070)http://udacity.github.io/RWDF-samples/Lesson4/patterns/off-canvas.html --&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;&lt;</span><span class="nt">head</span><span class="p">&gt;&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;Content-Type&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;text/html; charset=UTF-8&#34;</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/css&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;./off-canvas_files/default-styles.css&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">style</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/css&#34;</span><span class="p">&gt;</span>

      <span class="nt">html</span><span class="o">,</span> <span class="nt">body</span> <span class="p">{</span>
        <span class="k">height</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
        <span class="k">width</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nt">a</span><span class="p">#</span><span class="nn">menu</span> <span class="nt">svg</span> <span class="p">{</span>
        <span class="k">width</span><span class="p">:</span> <span class="mi">40</span><span class="kt">px</span><span class="p">;</span>
        <span class="n">fill</span><span class="p">:</span> <span class="mh">#000</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nt">nav</span><span class="o">,</span> <span class="nt">main</span> <span class="p">{</span>
        <span class="k">padding</span><span class="p">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>
        <span class="k">box-sizing</span><span class="p">:</span> <span class="kc">border-box</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nt">main</span> <span class="p">{</span>
        <span class="k">width</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
        <span class="k">height</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
      <span class="p">}</span>


      <span class="c">/*
</span><span class="c">       * Off-canvas layout styles.
</span><span class="c">       */</span>

      <span class="c">/* Since we&#39;re mobile-first, by default, the drawer is hidden. */</span>
      <span class="nt">nav</span> <span class="p">{</span>
        <span class="k">width</span><span class="p">:</span> <span class="mi">300</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">height</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
        <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
        <span class="c">/* This trasform moves the drawer off canvas. */</span>
        <span class="kp">-webkit-</span><span class="k">transform</span><span class="p">:</span> <span class="nb">translate</span><span class="p">(</span><span class="mi">-300</span><span class="kt">px</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="k">transform</span><span class="p">:</span> <span class="nb">translate</span><span class="p">(</span><span class="mi">-300</span><span class="kt">px</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="c">/* Optionally, we animate the drawer. */</span>
        <span class="k">transition</span><span class="p">:</span> <span class="k">transform</span> <span class="mf">0.3</span><span class="kt">s</span> <span class="kc">ease</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nt">nav</span><span class="p">.</span><span class="nc">open</span> <span class="p">{</span>
        <span class="kp">-webkit-</span><span class="k">transform</span><span class="p">:</span> <span class="nb">translate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="k">transform</span><span class="p">:</span> <span class="nb">translate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="c">/* If there is enough space (&gt; 600px), we keep the drawer open all the time. */</span>
      <span class="p">@</span><span class="k">media</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">600px</span><span class="o">)</span> <span class="p">{</span>

        <span class="c">/* We open the drawer. */</span>
        <span class="nt">nav</span> <span class="p">{</span>
          <span class="k">position</span><span class="p">:</span><span class="kc">relative</span><span class="p">;</span>
          <span class="kp">-webkit-</span><span class="k">transform</span><span class="p">:</span> <span class="nb">translate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
          <span class="k">transform</span><span class="p">:</span> <span class="nb">translate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c">/* We use Flexbox on the parent. */</span>
        <span class="nt">body</span> <span class="p">{</span>
          <span class="k">display</span><span class="p">:</span> <span class="kp">-webkit-</span><span class="kc">flex</span><span class="p">;</span>
          <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
          <span class="kp">-webkit-</span><span class="k">flex-flow</span><span class="p">:</span> <span class="kc">row</span> <span class="kc">nowrap</span><span class="p">;</span>
          <span class="k">flex-flow</span><span class="p">:</span> <span class="kc">row</span> <span class="kc">nowrap</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nt">main</span> <span class="p">{</span>
          <span class="k">width</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
          <span class="c">/* Flex-grow streches the main content to fill all available space. */</span>
          <span class="k">flex-grow</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>

      <span class="c">/* If there is space (&gt; 800px), we keep the drawer open by default. */</span>
      <span class="p">@</span><span class="k">media</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">600px</span><span class="o">)</span> <span class="p">{</span>
        <span class="nt">main</span> <span class="o">&gt;</span> <span class="p">#</span><span class="nn">menu</span><span class="p">:</span><span class="nd">after</span> <span class="p">{</span>
          <span class="k">content</span><span class="p">:</span> <span class="s1">&#39;The drawer stays open if width &gt; 600px&#39;</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nt">main</span> <span class="nt">p</span><span class="o">,</span> <span class="nt">nav</span> <span class="nt">p</span> <span class="p">{</span>
          <span class="k">text-decoration</span><span class="p">:</span> <span class="kc">line-through</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>

    <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;import&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;chrome-extension://melpgahbngpgnbhhccnopmlmpbmdaeoi/app/templates/feedback.html&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;udacity-test-widget&#34;</span><span class="p">&gt;&lt;</span><span class="nt">script</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;ud-grader-options&#34;</span><span class="p">&gt;</span><span class="nx">UdacityFEGradingEngine</span><span class="p">.</span><span class="nx">turnOn</span><span class="p">();&lt;/</span><span class="nt">script</span><span class="p">&gt;&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">nav</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;drawer&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;dark_blue&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Off Canvas<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Click outside the drawer to close<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">nav</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">main</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;light_blue&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;menu&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">svg</span> <span class="na">xmlns</span><span class="o">=</span><span class="s">&#34;http://www.w3.org/2000/svg&#34;</span> <span class="na">viewBox</span><span class="o">=</span><span class="s">&#34;0 0 24 24&#34;</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">path</span> <span class="na">d</span><span class="o">=</span><span class="s">&#34;M2 6h20v3H2zm0 5h20v3H2zm0 5h20v3H2z&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">path</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">svg</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Click on the menu icon to open the drawer<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">main</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
      <span class="cm">/*
</span><span class="cm">       * Open the drawer when the menu ison is clicked.
</span><span class="cm">       */</span>
      <span class="kd">var</span> <span class="nx">menu</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#menu&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">main</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;main&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">drawer</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#drawer&#39;</span><span class="p">);</span>

      <span class="nx">menu</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">drawer</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">toggle</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">);</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span>
      <span class="p">});</span>
      <span class="nx">main</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">drawer</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">);</span>
      <span class="p">});</span>

    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;chrome-extension://melpgahbngpgnbhhccnopmlmpbmdaeoi/app/js/libs/GE.js&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;udacity-front-end-feedback&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;&lt;</span><span class="nt">test-widget</span><span class="p">&gt;&lt;/</span><span class="nt">test-widget</span><span class="p">&gt;&lt;/</span><span class="nt">body</span><span class="p">&gt;&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">@</span><span class="k">import</span> <span class="nt">url</span><span class="o">(</span><span class="nt">https</span><span class="o">://</span><span class="nt">fonts</span><span class="p">.</span><span class="nc">googleapis</span><span class="p">.</span><span class="nc">com</span><span class="o">/</span><span class="nt">css</span><span class="o">?</span><span class="nt">family</span><span class="o">=</span><span class="nt">Roboto</span><span class="o">)</span><span class="p">;</span>

<span class="nt">html</span><span class="o">,</span> <span class="nt">body</span> <span class="p">{</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">body</span> <span class="p">{</span>
  <span class="k">font-family</span><span class="p">:</span> <span class="s1">&#39;Roboto&#39;</span><span class="p">,</span> <span class="kc">sans-serif</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nc">title</span> <span class="p">{</span>
  <span class="k">font-size</span><span class="p">:</span> <span class="mf">2.5</span><span class="kt">em</span><span class="p">;</span>
  <span class="k">text-align</span><span class="p">:</span> <span class="kc">center</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nc">box</span> <span class="p">{</span>
  <span class="k">min-height</span><span class="p">:</span> <span class="mi">150</span><span class="kt">px</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nc">dark_blue</span> <span class="p">{</span>
  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#2A457A</span><span class="p">;</span>
  <span class="k">color</span><span class="p">:</span> <span class="mh">#efefef</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nc">light_blue</span> <span class="p">{</span>
  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#099DD9</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nc">green</span> <span class="p">{</span>
  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#0C8542</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nc">lime</span> <span class="p">{</span>
  <span class="k">background-color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="mi">179</span><span class="p">,</span> <span class="mi">210</span><span class="p">,</span> <span class="mi">52</span><span class="p">);</span>
<span class="p">}</span>

<span class="p">.</span><span class="nc">seafoam</span> <span class="p">{</span>
  <span class="k">background-color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="mi">77</span><span class="p">,</span> <span class="mi">190</span><span class="p">,</span> <span class="mi">161</span><span class="p">);</span>
<span class="p">}</span>

<span class="p">.</span><span class="nc">red</span> <span class="p">{</span>
  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#EC1D3B</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nc">orange</span> <span class="p">{</span>
  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#F79420</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/html/">html</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>搭建一个基于 github-pages 和 jekyll 的免费博客</title>
                <link>https://ld000.space/post/github-pages-jekyll/</link>
                <guid isPermaLink="true">https://ld000.space/post/github-pages-jekyll/</guid>
                <pubDate>Fri, 16 Dec 2016 00:00:00 +0000</pubDate>
                
                    <author>voidd247@outlook.com (Voiddd)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>搭建一个基于 github-pages 和 jekyll 的免费博客</p>
<!-- more -->
<blockquote>
<p>环境 macOS 10.12.2</p>
</blockquote>
<h1 id="申请-github-pages">申请 github-pages</h1>
<hr>
<blockquote>
<p>源地址 <a href="https://pages.github.com">https://pages.github.com</a></p>
</blockquote>
<ol>
<li>
<p>创建一个仓库
在 github 建立一个新仓库，命名为 <code>username.github.io</code>，用自己的用户名替换 <code>username</code>。<strong>note: 如果用户名不匹配，将会不起作用。</strong></p>
</li>
<li>
<p>clone 项目 <code>git clone https://github.com/username/username.github.io</code></p>
</li>
<li>
<p>创建 hello world。<code>cd username.github.io &amp;&amp; echo &quot;Hello World&quot; &gt; index.html</code></p>
</li>
<li>
<p>push 项目。<code>git add --all &amp;&amp; git commit -m &quot;Initial commit&quot; &amp;&amp; git push -u origin master</code></p>
</li>
<li>
<p>访问 <code>http://username.github.io</code>，就能看到刚刚创建的网站了。</p>
</li>
</ol>
<h1 id="搭建-jekyll-环境">搭建 jekyll 环境</h1>
<hr>
<p>输入 <code>ruby --version</code> 验证是否安装了 <code>ruby</code>（Mac 已经预装了）</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1768578-d51c03c25e21438d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ruby_version.png"></p>
<p>安装 jekyll，输入 <code>gem install jekyll</code></p>
<p>删除之前的 <code>index.html</code>，运行 <code>jekyll new .</code>，jekyll 就会自动生成一些博客的基础文件和目录。输入 <code>jekyll serve</code>，就可以访问了。默认地址 <code>http://127.0.0.1:4000/</code>。</p>
<p>还可以在 <code>_config.yml</code> 中进行一些个性化配置。</p>
<p>文档地址 <code>http://jekyllcn.com/</code></p>
<h1 id="安装模板">安装模板</h1>
<hr>
<p>如果用 jekyll 从头开始搭建一个网站就太费时间了，可以先找一个模板，然后再在上面做修改。</p>
<p>一些模板网站：</p>
<ul>
<li><a href="http://jekyllthemes.org/">http://jekyllthemes.org/</a></li>
<li><a href="https://mademistakes.com/work/jekyll-themes/">https://mademistakes.com/work/jekyll-themes/</a></li>
</ul>
<p>我现在用的是第二个网站里的 <code>Minimal Mistakes Theme</code> 模板。</p>
<p>效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1768578-adf87c2843b91b17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="minimal_mistakes.png"></p>
<h2 id="安装过程">安装过程</h2>
<p>将项目 clone 下来，解压放入 github-pages 项目路径。</p>
<p>用以下代码替换 Gemfile 里的内容：</p>
<pre><code>source &quot;https://rubygems.org&quot;

gem &quot;github-pages&quot;, group: :jekyll_plugins

group :jekyll_plugins do
  gem &quot;jekyll-paginate&quot;
  gem &quot;jekyll-sitemap&quot;
  gem &quot;jekyll-gist&quot;
  gem &quot;jekyll-feed&quot;
  gem &quot;jemoji&quot;
end
</code></pre><p>然后运行 <code>bundle update</code> 安装依赖。</p>
<p>移除以下不需要的文件或文件夹：</p>
<ul>
<li><code>.editorconfig</code></li>
<li><code>.gitattributes</code></li>
<li><code>.github</code></li>
<li><code>/docs</code></li>
<li><code>/test</code></li>
<li><code>CHANGELOG.md</code></li>
<li><code>minimal-mistakes-jekyll.gemspec</code></li>
<li><code>README.md</code></li>
<li><code>screenshot-layouts.png</code></li>
<li><code>screenshot.png</code></li>
</ul>
<p>最后运行 <code>bundle exec jekyll serve</code> 就能在本地启动服务了。访问 <code>localhost:4000</code> 就能看到效果。</p>
<h2 id="碰到的坑安装的时候会碰到以下错误">碰到的坑，安装的时候会碰到以下错误</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">Gem::Ext::BuildError: ERROR: Failed to build gem native extension.

current directory: /Library/Ruby/Gems/2.0.0/gems/nokogiri-1.6.8.1/ext/nokogiri
/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby -r ./siteconf20161208-38005-ye53g2.rb extconf.rb
checking <span class="k">if</span> the C compiler accepts ... yes
checking <span class="k">if</span> the C compiler accepts -Wno-error<span class="o">=</span>unused-command-line-argument-hard-error-in-future... no
Building nokogiri using packaged libraries.
Using mini_portile version 2.1.0
checking <span class="k">for</span> iconv.h... yes
checking <span class="k">for</span> gzdopen<span class="o">()</span> in -lz... yes
checking <span class="k">for</span> iconv... yes
************************************************************************
IMPORTANT NOTICE:

Building Nokogiri with a packaged version of libxml2-2.9.4.

Team Nokogiri will keep on doing their best to provide security
updates in a timely manner, but <span class="k">if</span> this is a concern <span class="k">for</span> you and want
to use the system library instead<span class="p">;</span> abort this installation process and
reinstall nokogiri as follows:

    gem install nokogiri -- --use-system-libraries
        <span class="o">[</span>--with-xml2-config<span class="o">=</span>/path/to/xml2-config<span class="o">]</span>
        <span class="o">[</span>--with-xslt-config<span class="o">=</span>/path/to/xslt-config<span class="o">]</span>

If you are using Bundler, tell it to use the option:

    bundle config build.nokogiri --use-system-libraries
    bundle install

Note, however, that nokogiri is not fully compatible with arbitrary
versions of libxml2 provided by OS/package vendors.
************************************************************************
Extracting libxml2-2.9.4.tar.gz into tmp/x86_64-apple-darwin16/ports/libxml2/2.9.4... OK
Running <span class="s1">&#39;configure&#39;</span> <span class="k">for</span> libxml2 2.9.4... OK
Running <span class="s1">&#39;compile&#39;</span> <span class="k">for</span> libxml2 2.9.4... ERROR, review
<span class="s1">&#39;/Library/Ruby/Gems/2.0.0/gems/nokogiri-1.6.8.1/ext/nokogiri/tmp/x86_64-apple-darwin16/ports/libxml2/2.9.4/compile.log&#39;</span> to see what happened. Last lines are:
<span class="o">========================================================================</span>
  CCLD     libxml2.la
  CC       testdso.lo
  CCLD     testdso.la
  CC       xmllint.o
  CCLD     xmllint
ld: warning: ignoring file /usr/local/Cellar/xz/5.2.2/lib/liblzma.dylib, file was built <span class="k">for</span> x86_64 which is not the architecture being linked <span class="o">(</span>i386<span class="o">)</span>:
/usr/local/Cellar/xz/5.2.2/lib/liblzma.dylib
Undefined symbols <span class="k">for</span> architecture i386:
  <span class="s2">&#34;_lzma_auto_decoder&#34;</span>, referenced from:
      _xz_head in libxml2.a<span class="o">(</span>xzlib.o<span class="o">)</span>
  <span class="s2">&#34;_lzma_code&#34;</span>, referenced from:
      _xz_decomp in libxml2.a<span class="o">(</span>xzlib.o<span class="o">)</span>
  <span class="s2">&#34;_lzma_end&#34;</span>, referenced from:
      ___libxml2_xzclose in libxml2.a<span class="o">(</span>xzlib.o<span class="o">)</span>
  <span class="s2">&#34;_lzma_properties_decode&#34;</span>, referenced from:
      _is_format_lzma in libxml2.a<span class="o">(</span>xzlib.o<span class="o">)</span>
ld: symbol<span class="o">(</span>s<span class="o">)</span> not found <span class="k">for</span> architecture i386
clang: error: linker <span class="nb">command</span> failed with <span class="nb">exit</span> code <span class="m">1</span> <span class="o">(</span>use -v to see invocation<span class="o">)</span>
make<span class="o">[</span>2<span class="o">]</span>: *** <span class="o">[</span>xmllint<span class="o">]</span> Error <span class="m">1</span>
make<span class="o">[</span>1<span class="o">]</span>: *** <span class="o">[</span>all-recursive<span class="o">]</span> Error <span class="m">1</span>
make: *** <span class="o">[</span>all<span class="o">]</span> Error <span class="nv">2</span>
<span class="o">========================================================================</span>
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file <span class="k">for</span> more details.  You may
need configuration options.

Provided configuration options:
	--with-opt-dir
	--without-opt-dir
	--with-opt-include
	--without-opt-include<span class="o">=</span><span class="si">${</span><span class="nv">opt</span><span class="p">-dir</span><span class="si">}</span>/include
	--with-opt-lib
	--without-opt-lib<span class="o">=</span><span class="si">${</span><span class="nv">opt</span><span class="p">-dir</span><span class="si">}</span>/lib
	--with-make-prog
	--without-make-prog
	--srcdir<span class="o">=</span>.
	--curdir
	--ruby<span class="o">=</span>/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby
	--help
	--clean
	--use-system-libraries
	--enable-static
	--disable-static
	--with-zlib-dir
	--without-zlib-dir
	--with-zlib-include
	--without-zlib-include<span class="o">=</span><span class="si">${</span><span class="nv">zlib</span><span class="p">-dir</span><span class="si">}</span>/include
	--with-zlib-lib
	--without-zlib-lib<span class="o">=</span><span class="si">${</span><span class="nv">zlib</span><span class="p">-dir</span><span class="si">}</span>/lib
	--enable-cross-build
	--disable-cross-build
/Library/Ruby/Gems/2.0.0/gems/mini_portile2-2.1.0/lib/mini_portile2/mini_portile.rb:366:in <span class="sb">`</span>block in execute<span class="s1">&#39;: Failed to complete compile task (RuntimeError)
</span><span class="s1">	from /Library/Ruby/Gems/2.0.0/gems/mini_portile2-2.1.0/lib/mini_portile2/mini_portile.rb:337:in `chdir&#39;</span>
	from /Library/Ruby/Gems/2.0.0/gems/mini_portile2-2.1.0/lib/mini_portile2/mini_portile.rb:337:in <span class="sb">`</span>execute<span class="s1">&#39;
</span><span class="s1">	from /Library/Ruby/Gems/2.0.0/gems/mini_portile2-2.1.0/lib/mini_portile2/mini_portile.rb:111:in `compile&#39;</span>
	from /Library/Ruby/Gems/2.0.0/gems/mini_portile2-2.1.0/lib/mini_portile2/mini_portile.rb:150:in <span class="sb">`</span>cook<span class="s1">&#39;
</span><span class="s1">	from extconf.rb:365:in `block (2 levels) in process_recipe&#39;</span>
	from extconf.rb:258:in <span class="sb">`</span>block in chdir_for_build<span class="s1">&#39;
</span><span class="s1">	from extconf.rb:257:in `chdir&#39;</span>
	from extconf.rb:257:in <span class="sb">`</span>chdir_for_build<span class="s1">&#39;
</span><span class="s1">	from extconf.rb:364:in `block in process_recipe&#39;</span>
	from extconf.rb:263:in <span class="sb">`</span>tap<span class="s1">&#39;
</span><span class="s1">	from extconf.rb:263:in `process_recipe&#39;</span>
	from extconf.rb:556:in <span class="sb">`</span>&lt;main&gt;<span class="s1">&#39;
</span><span class="s1">
</span><span class="s1">To see why this extension failed to compile, please check the mkmf.log which can be found here:
</span><span class="s1">
</span><span class="s1">  /Library/Ruby/Gems/2.0.0/extensions/universal-darwin-16/2.0.0/nokogiri-1.6.8.1/mkmf.log
</span><span class="s1">
</span><span class="s1">extconf failed, exit code 1
</span><span class="s1">
</span><span class="s1">Gem files will remain installed in /Library/Ruby/Gems/2.0.0/gems/nokogiri-1.6.8.1 for inspection.
</span><span class="s1">Results logged to /Library/Ruby/Gems/2.0.0/extensions/universal-darwin-16/2.0.0/nokogiri-1.6.8.1/gem_make.out
</span><span class="s1">
</span><span class="s1">An error occurred while installing nokogiri (1.6.8.1), and Bundler cannot continue.
</span><span class="s1">Make sure that `gem install nokogiri -v &#39;</span>1.6.8.1<span class="err">&#39;</span><span class="sb">`</span> succeeds before bundling.
</code></pre></td></tr></table>
</div>
</div><p>运行以下命令解决：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">brew uninstall --ignore-dependencies xz

bundle update
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/github-pages/">github-pages</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>RandomAccess 接口使用</title>
                <link>https://ld000.space/post/random-access/</link>
                <guid isPermaLink="true">https://ld000.space/post/random-access/</guid>
                <pubDate>Sat, 19 Mar 2016 00:00:00 +0000</pubDate>
                
                    <author>voidd247@outlook.com (Voiddd)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>List 实现所使用的标记接口，用来表明其支持快速（通常是固定时间）随机访问。此接口的主要目的是允许一般的算法更改其行为，从而在将其应用到随机或连续访问列表时能提供良好的性能。</p>
<p>##用法</p>
<p>Random Access List(随机访问列表)如 <code>ArrayList</code> 要实现此接口，Sequence Access List(顺序访问列表)如 <code>LinkedList</code> 不要实现。
因为两者的高效遍历算法不同</p>
<p>通常做法，遍历前先判断：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="k">if</span> <span class="o">(</span><span class="n">list</span> <span class="n">instance</span> <span class="n">of</span> <span class="n">RandomAccess</span><span class="o">)</span> <span class="o">{</span>       
  <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">m</span><span class="o">++){}</span>   
<span class="o">}</span><span class="k">else</span><span class="o">{</span>       
  <span class="n">Iterator</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>       
  <span class="k">while</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){}</span>   
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>随机访问列表使用循环遍历，顺序访问列表使用迭代器遍历。</p>
<p>##JDK 定义</p>
<p><code>List</code> 实现使用的标记接口，用来表明支持快速(通常是固定时间)随机访问。这个接口的主要目的是允许一般的算法更改它们的行为，从而在随机或连续访问列表时提供更好的性能。</p>
<p>将操作随机访问列表(比如 <code>ArrayList</code>)的最好的算法应用到顺序访问列表(比如 <code>LinkedList</code>)时，会产生二次项行为。鼓励一般的列表算法检查给定的列表是否 <code>instanceof</code> 这个接口，防止在顺序访问列表时使用较差的算法，如果需要保证可接受的性能时可以更改算法。</p>
<p>公认的是随机和顺序访问的区别通常是模糊的。例如，当一些 <code>List</code> 实现很大时会提供渐进的线性访问时间，但实际是固定的访问时间。这样的 <code>List</code> 实现通常应该实现此接口。通常来说，一个 <code>List</code> 的实现类应该实现这个接口如果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">,</span> <span class="n">n</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
        <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>比</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"> <span class="k">for</span> <span class="o">(</span><span class="n">Iterator</span> <span class="n">i</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="o">)</span>
          <span class="n">i</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</code></pre></td></tr></table>
</div>
</div><p>快</p>
<p>##验证事例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.ld.practice.arraylist</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.RandomAccess</span><span class="o">;</span>

<span class="cm">/**
</span><span class="cm"> * 测试Random Access List(随机访问列表)如 ArrayList 和 Sequence Access List(顺序访问列表)如 LinkedList &lt;/br&gt;
</span><span class="cm"> * 不同遍历算法的效率&lt;/br&gt;
</span><span class="cm"> * 结论：前者用循环，后者用迭代器
</span><span class="cm"> */</span>
<span class="nd">@SuppressWarnings</span><span class="o">({</span><span class="s">&#34;rawtypes&#34;</span><span class="o">,</span> <span class="s">&#34;unchecked&#34;</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListLoopTest</span> <span class="o">{</span>

	<span class="cm">/**
</span><span class="cm">	 * 初始化 list，添加n个元素
</span><span class="cm">	 *
</span><span class="cm">	 * @param list
</span><span class="cm">	 * @return
</span><span class="cm">	 */</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">List</span> <span class="nf">initList</span><span class="o">(</span><span class="n">List</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
			<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">list</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="cm">/**
</span><span class="cm">	 * 遍历 list，判断是否实现 RandomAccess 接口来使用不同的遍历方法
</span><span class="cm">	 *
</span><span class="cm">	 * @param list
</span><span class="cm">	 */</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">accessList</span><span class="o">(</span><span class="n">List</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

		<span class="k">if</span> <span class="o">(</span><span class="n">list</span> <span class="k">instanceof</span> <span class="n">RandomAccess</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;实现了 RandomAccess 接口...&#34;</span><span class="o">);</span>
			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;没实现 RandomAccess 接口...&#34;</span><span class="o">);</span>
			<span class="k">for</span> <span class="o">(</span><span class="n">Iterator</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();)</span> <span class="o">{</span>
				<span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
			<span class="o">}</span>
		<span class="o">}</span>

		<span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;遍历时间：&#34;</span> <span class="o">+</span> <span class="o">(</span><span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">));</span>
	<span class="o">}</span>

	<span class="cm">/**
</span><span class="cm">	 * loop 遍历 list
</span><span class="cm">	 */</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">accessListByLoop</span><span class="o">(</span><span class="n">List</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
		<span class="o">}</span>

		<span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;loop遍历时间：&#34;</span> <span class="o">+</span> <span class="o">(</span><span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">));</span>
	<span class="o">}</span>

	<span class="cm">/**
</span><span class="cm">	 * 迭代器遍历
</span><span class="cm">	 */</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">accessListByIterator</span><span class="o">(</span><span class="n">List</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

		<span class="k">for</span> <span class="o">(</span><span class="n">Iterator</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();)</span> <span class="o">{</span>
			<span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
		<span class="o">}</span>

		<span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Iterator遍历时间：&#34;</span> <span class="o">+</span> <span class="o">(</span><span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">));</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">aList</span> <span class="o">=</span> <span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;)</span> <span class="n">initList</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(),</span> <span class="n">2000000</span><span class="o">);</span>
		<span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">lList</span> <span class="o">=</span> <span class="o">(</span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;)</span> <span class="n">initList</span><span class="o">(</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;(),</span> <span class="n">50000</span><span class="o">);</span>

		<span class="n">accessList</span><span class="o">(</span><span class="n">aList</span><span class="o">);</span>
		<span class="n">accessList</span><span class="o">(</span><span class="n">lList</span><span class="o">);</span>

		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;ArrayList&#34;</span><span class="o">);</span>
		<span class="n">accessListByLoop</span><span class="o">(</span><span class="n">aList</span><span class="o">);</span>
		<span class="n">accessListByIterator</span><span class="o">(</span><span class="n">aList</span><span class="o">);</span>

		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;LinkedList&#34;</span><span class="o">);</span>
		<span class="n">accessListByLoop</span><span class="o">(</span><span class="n">lList</span><span class="o">);</span>
		<span class="n">accessListByIterator</span><span class="o">(</span><span class="n">lList</span><span class="o">);</span>
	<span class="o">}</span>

  <span class="cm">/*
</span><span class="cm">  实现了 RandomAccess 接口...
</span><span class="cm">  遍历时间：8
</span><span class="cm">  没实现 RandomAccess 接口...
</span><span class="cm">  遍历时间：2
</span><span class="cm">  ArrayList
</span><span class="cm">  loop遍历时间：5
</span><span class="cm">  Iterator遍历时间：8
</span><span class="cm">  LinkedList
</span><span class="cm">  loop遍历时间：1532
</span><span class="cm">  Iterator遍历时间：1
</span><span class="cm">  */</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ld000.space/tags/java/">java</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
